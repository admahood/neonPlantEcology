subplotID != "32",
subplotID != "40",
subplotID != "41")  %>%
mutate(subplotID = str_sub(subplotID, 1, 4))
traces100s <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
mutate(site = str_sub(plotID, 1,4)) %>%
filter(taxonID != "",
subplotID == "31"| # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID == "32"|
subplotID == "40"|
subplotID == "41")
# aggregating at different scales ----------------------------------------------
cover8_1m2 <- cover8 %>%
group_by(plotID, subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4)) %>%
ifelse(fix_unks==TRUE, unk_fixer(.), .) #%>% get_diversity_info()
cover8_1m2_10m2 <- rbind(cover8, traces8) %>%
group_by(plotID,subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4)) %>%
unk_fixer()
cover4 <- cover8_1m2_10m2 %>%
mutate(subplotID = str_sub(subplotID, 1,2)) %>%
rbind(traces100s) %>% # adding in the 100m2 subplots
group_by(plotID, subplotID, year, taxonID) %>%
summarise(cover = sum(cover), # this is summing together repeats from the rbinding
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family),
site = first(site)) %>%
ungroup() %>%
unk_fixer()
if(scale == "1m") full_on_cover <- cover8_1m2
if(scale == "10m") full_on_cover <- cover8_1m2_10m2
if(scale == "100m") full_on_cover <- cover4
return(full_on_cover)
}
get_longform_cover(div_obj, scale = "100m", fix_unks == TRUE) %>% filter(nativeStatusCode == "UNK")
get_longform_cover(div_obj, scale = "100m", fix_unks == FALSE) %>% filter(nativeStatusCode == "UNK")
#######################################################################
# get_longform_cover creates a long dataframe for cover from the neon #
# diversity object (used in all of the following functions)           #
#######################################################################
get_longform_cover <- function(neon_div_object,
trace_cover=0.5,
scale = "plot",
fix_unks = FALSE){
if(scale == "plot"){
cover <- neon_div_object$div_1m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
replace_na(list(percentCover=trace_cover)) %>%
group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the max cover
# per sampling effort
summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()  %>%
filter(taxonID != "") %>%
group_by(plotID, taxonID, year) %>%
summarise(cover = sum(cover, na.rm=TRUE)/8,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()
traces <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
filter(taxonID != "") %>%
group_by(plotID, taxonID, year) %>%
summarise(cover = sum(cover, na.rm=TRUE)/12,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()
full_on_cover <- rbind(cover, traces) %>%
group_by(plotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4),
subplotID = "plot") %>%
unk_fixer()
return(full_on_cover)
}
cover8 <- neon_div_object$div_1m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
# entries in the df with no values but species was there
# i.e. someone put the sp. code and forgot to fill in the number
# putting as trace cover value
replace_na(list(percentCover=trace_cover)) %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the mean cover
# per sampling effort, without aggregating, then later we'll aggregate.
# that way, a fall-bloomer that isn't visible in spring, for example,
# will be given its full cover value for fall, but then a species
# that is there for both seasons will be averaged, if that makes sense
summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()  %>%
filter(taxonID != "") %>%
mutate(subplotID = str_sub(subplotID, 1, 4))
# 10m2,100m2 are given 0.5 (we can change later)
# unique(x$div_10m2Data100m2Data$subplotID) # there are 12 subplots
traces8 <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
filter(taxonID != "",
subplotID != "31", # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID != "32",
subplotID != "40",
subplotID != "41")  %>%
mutate(subplotID = str_sub(subplotID, 1, 4))
traces100s <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
mutate(site = str_sub(plotID, 1,4)) %>%
filter(taxonID != "",
subplotID == "31"| # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID == "32"|
subplotID == "40"|
subplotID == "41")
# aggregating at different scales ----------------------------------------------
cover8_1m2 <- cover8 %>%
group_by(plotID, subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4)) %>%
unk_fixer(.) #%>% get_diversity_info()
cover8_1m2_10m2 <- rbind(cover8, traces8) %>%
group_by(plotID,subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4)) %>%
unk_fixer()
cover4 <- cover8_1m2_10m2 %>%
mutate(subplotID = str_sub(subplotID, 1,2)) %>%
rbind(traces100s) %>% # adding in the 100m2 subplots
group_by(plotID, subplotID, year, taxonID) %>%
summarise(cover = sum(cover), # this is summing together repeats from the rbinding
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family),
site = first(site)) %>%
ungroup() %>%
unk_fixer()
if(scale == "1m") full_on_cover <- cover8_1m2
if(scale == "10m") full_on_cover <- cover8_1m2_10m2
if(scale == "100m") full_on_cover <- cover4
return(full_on_cover)
}
get_longform_cover(div_obj, scale = "100m", fix_unks == FALSE) %>% filter(nativeStatusCode == "UNK")
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% filter(nativeStatusCode == "UNK")
get_longform_cover(div_obj, scale = "100m", fix_unks = T) %>% filter(nativeStatusCode == "UNK")
#######################################################################
# get_longform_cover creates a long dataframe for cover from the neon #
# diversity object (used in all of the following functions)           #
#######################################################################
get_longform_cover <- function(neon_div_object,
trace_cover=0.5,
scale = "plot",
fix_unks = FALSE){
if(scale == "plot"){
cover <- neon_div_object$div_1m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
replace_na(list(percentCover=trace_cover)) %>%
group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the max cover
# per sampling effort
summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()  %>%
filter(taxonID != "") %>%
group_by(plotID, taxonID, year) %>%
summarise(cover = sum(cover, na.rm=TRUE)/8,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()
traces <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
filter(taxonID != "") %>%
group_by(plotID, taxonID, year) %>%
summarise(cover = sum(cover, na.rm=TRUE)/12,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()
full_on_cover <- rbind(cover, traces) %>%
group_by(plotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4),
subplotID = "plot") %>%
unk_fixer()
return(full_on_cover)
}
cover8 <- neon_div_object$div_1m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
# entries in the df with no values but species was there
# i.e. someone put the sp. code and forgot to fill in the number
# putting as trace cover value
replace_na(list(percentCover=trace_cover)) %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the mean cover
# per sampling effort, without aggregating, then later we'll aggregate.
# that way, a fall-bloomer that isn't visible in spring, for example,
# will be given its full cover value for fall, but then a species
# that is there for both seasons will be averaged, if that makes sense
summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()  %>%
filter(taxonID != "") %>%
mutate(subplotID = str_sub(subplotID, 1, 4))
# 10m2,100m2 are given 0.5 (we can change later)
# unique(x$div_10m2Data100m2Data$subplotID) # there are 12 subplots
traces8 <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
filter(taxonID != "",
subplotID != "31", # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID != "32",
subplotID != "40",
subplotID != "41")  %>%
mutate(subplotID = str_sub(subplotID, 1, 4))
traces100s <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
mutate(site = str_sub(plotID, 1,4)) %>%
filter(taxonID != "",
subplotID == "31"| # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID == "32"|
subplotID == "40"|
subplotID == "41")
# aggregating at different scales ----------------------------------------------
cover8_1m2 <- cover8 %>%
group_by(plotID, subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4)) %>%
ifelse(fix_unks,unk_fixer(.),.) #%>% get_diversity_info()
cover8_1m2_10m2 <- rbind(cover8, traces8) %>%
group_by(plotID,subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4)) %>%
unk_fixer()
cover4 <- cover8_1m2_10m2 %>%
mutate(subplotID = str_sub(subplotID, 1,2)) %>%
rbind(traces100s) %>% # adding in the 100m2 subplots
group_by(plotID, subplotID, year, taxonID) %>%
summarise(cover = sum(cover), # this is summing together repeats from the rbinding
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family),
site = first(site)) %>%
ungroup() %>%
unk_fixer()
if(scale == "1m") full_on_cover <- cover8_1m2
if(scale == "10m") full_on_cover <- cover8_1m2_10m2
if(scale == "100m") full_on_cover <- cover4
return(full_on_cover)
}
get_longform_cover(div_obj, scale = "100m", fix_unks = T) %>% filter(nativeStatusCode == "UNK")
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% filter(nativeStatusCode == "UNK")
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% table(.$nativeStatusCode)
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% summary(.$nativeStatusCode)
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% table() %>% dplyr::select(nativeStatusCode) %>% table
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% table() %>% dplyr::select(nativeStatusCode) %>% pull%>%table
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% table() %>% dplyr::select(nativeStatusCode) %>% unique
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% table()
get_longform_cover(div_obj, scale = "100m", fix_unks = FALSE) %>% dplyr::select(nativeStatusCode) %>% pull%>%table
get_longform_cover(div_obj, scale = "100m", fix_unks = TRUE) %>% dplyr::select(nativeStatusCode) %>% pull%>%table
#######################################################################
# get_longform_cover creates a long dataframe for cover from the neon #
# diversity object (used in all of the following functions)           #
#######################################################################
get_longform_cover <- function(neon_div_object,
trace_cover=0.5,
scale = "plot",
fix_unks = FALSE){
if(scale == "plot"){
cover <- neon_div_object$div_1m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
replace_na(list(percentCover=trace_cover)) %>%
group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the max cover
# per sampling effort
summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()  %>%
filter(taxonID != "") %>%
group_by(plotID, taxonID, year) %>%
summarise(cover = sum(cover, na.rm=TRUE)/8,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()
traces <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
filter(taxonID != "") %>%
group_by(plotID, taxonID, year) %>%
summarise(cover = sum(cover, na.rm=TRUE)/12,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()
full_on_cover <- rbind(cover, traces) %>%
group_by(plotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4),
subplotID = "plot")
if(fix_unks) full_on_cover <- full_on_cover %>%  unk_fixer()
return(full_on_cover)
}
cover8 <- neon_div_object$div_1m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
# entries in the df with no values but species was there
# i.e. someone put the sp. code and forgot to fill in the number
# putting as trace cover value
replace_na(list(percentCover=trace_cover)) %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the mean cover
# per sampling effort, without aggregating, then later we'll aggregate.
# that way, a fall-bloomer that isn't visible in spring, for example,
# will be given its full cover value for fall, but then a species
# that is there for both seasons will be averaged, if that makes sense
summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
ungroup()  %>%
filter(taxonID != "") %>%
mutate(subplotID = str_sub(subplotID, 1, 4))
# 10m2,100m2 are given 0.5 (we can change later)
# unique(x$div_10m2Data100m2Data$subplotID) # there are 12 subplots
traces8 <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
filter(taxonID != "",
subplotID != "31", # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID != "32",
subplotID != "40",
subplotID != "41")  %>%
mutate(subplotID = str_sub(subplotID, 1, 4))
traces100s <- neon_div_object$div_10m2Data100m2Data %>%
mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
mutate(year = str_c(str_sub(endDate,1,4)))%>%
group_by(plotID, subplotID, taxonID, year) %>%
summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
ungroup() %>%
mutate(site = str_sub(plotID, 1,4)) %>%
filter(taxonID != "",
subplotID == "31"| # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID == "32"|
subplotID == "40"|
subplotID == "41")
# aggregating at different scales ----------------------------------------------
cover8_1m2 <- cover8 %>%
group_by(plotID, subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4))
if(fix_unks) cover8_1m2 <- unk_fixer(cover8_1m2)
cover8_1m2_10m2 <- rbind(cover8, traces8) %>%
group_by(plotID,subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
summarise(cover = sum(cover)) %>%
ungroup()%>%
mutate(site = str_sub(plotID, 1,4))
if(fix_unks) cover8_1m2_10m2<-cover8_1m2_10m2 %>%  unk_fixer()
cover4 <- cover8_1m2_10m2 %>%
mutate(subplotID = str_sub(subplotID, 1,2)) %>%
rbind(traces100s) %>% # adding in the 100m2 subplots
group_by(plotID, subplotID, year, taxonID) %>%
summarise(cover = sum(cover), # this is summing together repeats from the rbinding
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family),
site = first(site)) %>%
ungroup()
if(fix_unks) cover4 <- cover4 %>%  unk_fixer()
if(scale == "1m") full_on_cover <- cover8_1m2
if(scale == "10m") full_on_cover <- cover8_1m2_10m2
if(scale == "100m") full_on_cover <- cover4
return(full_on_cover)
}
get_longform_cover(div_obj, scale = "100m", fix_unks = TRUE) %>% dplyr::select(nativeStatusCode) %>% pull%>%table
get_longform_cover(div_obj, scale = "100m", fix_unks = F) %>% dplyr::select(nativeStatusCode) %>% pull%>%table
get_longform_cover(div_obj, scale = "100m", fix_unks = F)
devtools::document()
rm(list = c("download_plant_div", "get_longform_cover", "unk_fixer"))
?get_longform_cover
rm(list = c("download_plant_div", "get_longform_cover", "unk_fixer"))
devtools::document()
?get_longform_cover
devtools::document()
?get_longform_cover
devtools::document()
?get_diversity_info
get_diversity_info(div_obj) %>%
names()
devtools::document()
library(neondiversity)
?neondiversity::download_plant_div
?neondiversity::vegify
devtools::install_github(admahood/neondiversity)
`devtools::install_github("admahood/neondiversity")`
devtools::install_github("admahood/neondiversity")
