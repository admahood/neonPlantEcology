dplyr::ungroup() %>%
tibble::as_tibble()
traces <- neon_div_object$div_10m2Data100m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::group_by(plotID, subplotID, taxonID, eventID) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/ifelse(as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup() %>%
tibble::as_tibble()
n_plots <- length(unique(cover$plotID))
full_on_cover <- dplyr::bind_rows(cover, traces) %>%
dtplyr::lazy_dt() %>%
dplyr::group_by(plotID, taxonID, eventID, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4)) %>%
dplyr::group_by(site, taxonID, eventID, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)/n_plots) %>%
dplyr::mutate(subplotID = "site",
plotID = "site") %>%
dplyr::ungroup() %>%
tidyr::replace_na(list(family = "Unknown")) %>%
tibble::as_tibble()
if(timescale == "all") {
full_on_cover <- full_on_cover  %>%
tidyr::separate(eventID, into = c("site_plot", "bout", "eventID"),sep = "\\.",remove = F)
year_range <- unique(full_on_cover$eventID)%>%
as.numeric %>%
range %>%
paste(collapse = "-")
n_years <- length(unique(full_on_cover$eventID))
full_on_cover <- full_on_cover %>%
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName,
family, site, subplotID) %>%
dplyr::summarise(cover = sum(cover, na.rm=T)/n_years) %>%
dplyr::ungroup() %>%
dplyr::mutate(eventID = year_range)
}
if(timescale == "annual") {
full_on_cover <- full_on_cover  %>%
tidyr::separate(eventID, into = c("site_plot", "bout", "eventID"),sep = "\\.",remove = F)
full_on_cover <- full_on_cover %>%
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName,
family, site, subplotID,eventID) %>%
dplyr::summarise(cover = max(cover, na.rm=T)) %>%
dplyr::ungroup()
}
return(full_on_cover)
}
# cover 8 ===========
cover8 <- neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::filter(divDataType == divDataType) %>%
tidyr::replace_na(list(percentCover=trace_cover)) %>%
dplyr::select(plotID, subplotID, taxonID, eventID, cover = percentCover,
nativeStatusCode, scientificName, family) %>%
dplyr::filter(taxonID != "") %>%
dplyr::mutate(subplotID = stringr::str_sub(subplotID, 1, 4)) %>%
tidyr::replace_na(list(family = "Unknown")) %>%
tibble::as_tibble()
# 10m2,100m2 are given 0.5 (we can change later)
# unique(x$div_10m2Data100m2Data$subplotID) # there are 12 subplots
# traces8 (10m2) ==============
traces8 <- neon_div_object$div_10m2Data100m2Data %>%
dtplyr::lazy_dt() %>%
# dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::group_by(plotID, subplotID, taxonID, eventID, scientificName,
nativeStatusCode, family) %>%
dplyr::summarise(cover = trace_cover) %>%
dplyr::ungroup() %>%
dplyr::filter(taxonID != "",
subplotID != "31", # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID != "32",
subplotID != "40",
subplotID != "41")  %>%
dplyr::mutate(subplotID = stringr::str_sub(subplotID, 1, 4)) %>%
tidyr::replace_na(list(family = "Unknown")) %>%
tibble::as_tibble()
# traces100s ========
traces100s <- neon_div_object$div_10m2Data100m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::group_by(plotID, subplotID, taxonID, eventID, scientificName,
nativeStatusCode, family) %>%
dplyr::summarise(cover = trace_cover) %>%
dplyr::ungroup() %>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4)) %>%
dplyr::filter(taxonID != "",
subplotID == "31"| # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID == "32"|
subplotID == "40"|
subplotID == "41") %>%
tidyr::replace_na(list(family = "Unknown")) %>%
tibble::as_tibble()
# aggregating at different spatial scales ------------------------------------
cover8_1m2 <- cover8 %>%
dplyr::group_by(plotID, subplotID, taxonID, eventID, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4))
cover8_1m2_10m2 <- dplyr::bind_rows(cover8, traces8) %>%
dplyr::group_by(plotID,subplotID, taxonID, eventID, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4))
cover4 <- cover8_1m2_10m2 %>%
dplyr::mutate(subplotID = stringr::str_sub(subplotID, 1,2)) %>%
dplyr::bind_rows(traces100s) %>% # adding in the 100m2 subplots
dplyr::group_by(plotID, subplotID, eventID, taxonID) %>%
dplyr::summarise(cover = sum(cover), # this is summing together repeats from the rbinding
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family),
site = first(site)) %>%
dplyr::ungroup()
if(scale == "1m") full_on_cover <- cover8_1m2
if(scale == "10m") full_on_cover <- cover8_1m2_10m2
if(scale == "100m") full_on_cover <- cover4
if(timescale == "all") {
full_on_cover <- full_on_cover %>%
tidyr::separate(eventID, into = c("site_plot", "bout", "eventID"),sep = "\\.",remove = F)
year_range <- unique(full_on_cover$eventID)%>%
as.numeric %>%
range %>%
paste(collapse = "-")
n_years <- length(unique(full_on_cover$eventID))
full_on_cover <- full_on_cover %>%
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName,
family, site, subplotID) %>%
dplyr::summarise(cover = sum(cover, na.rm=T)/n_years) %>%
dplyr::ungroup() %>%
dplyr::mutate(eventID = year_range)
}
if(timescale == "annual") {
full_on_cover <- full_on_cover %>%
tidyr::separate(eventID, into = c("site_plot", "bout", "eventID"),sep = "\\.",remove = F)
full_on_cover <- full_on_cover %>%
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName,
family, site, subplotID,eventID) %>%
dplyr::summarise(cover = max(cover, na.rm=T)) %>%
dplyr::ungroup()
}
return(full_on_cover)
}
npe_longform(d, timescale = "annual") %>% dplyr::select(site, eventID) %>% unique()
check()
document()
build()
install()
citation("devtools")
data("sites")
force(sites)
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace("magrittr")
data("sites")
if(all) return(sites$siteID)
if(!is.na(domain[1])) sites <- dplyr::filter(sites, domainNumb %in% domain)
if(!is.na(type[1])) sites <- dplyr::filter(sites, type %in% siteTYpe)
return(sites)
}
npe_site_ids(domain = "D14")
usethis::use_vignette("using_npe")
d
d14 <- npe_site_ids(domain = "D14")
d14
sites %>% pull(siteID)
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes, as a character vector.
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace("magrittr")
data("sites")
if(all) return(sites$siteID)
if(!is.na(domain[1])) sites <- dplyr::filter(sites, domainNumb %in% domain)
if(!is.na(type[1])) sites <- dplyr::filter(sites, type %in% siteTYpe)
return(sites %>% pull(siteID))
}
d14 <- npe_site_ids(domain = "D14")
d14
d14 %>% npe_download_plant_div(sites = .) -> D14
save(D14, file = "data/D14")
save(D14, file = "data/D14.rda")
library(tidyverse)
library(neonPlantEcology)
comm <- npe_community_matrix(D14)
comm
install()
?vegan::specaccum
npe_plot_info(comm)
metadata <- npe_plot_info(comm)
which(metadata$site == "JORN")
which(metadata$site != "JORN")
which(metadata$site == "JORN") %>% range()
which(metadata$site == "SRER") %>% range()
sp1 <- vegan::specaccum(comm[1:152,])
sp_jorn <- vegan::specaccum(comm[1:152,])
sp_srer <- vegan::specaccum(comm[152:347,])
plot(sp_jorn)
plot(sp_srer, add=T)
plot(sp_jorn)
plot(sp_srer, add=T)
plot(sp_srer)
plot(sp_jorn, add=T)
sp_jorn <- vegan::specaccum(comm[1:152,])
sp_srer <- vegan::specaccum(comm[152:347,])
plot(sp_srer, col = "blue")
plot(sp_jorn, col = "gold", add=T)
nmds <- metaMDS(comm)
nmds <- metaMDS(comm,trace = F)
nmds$species
ggplot(nmds$points, aes(x=MDS1, y=MDS2)) +
geom_point()
nmds$points
nmds$points %>%
as_tibble(rownames = "rowname")
metadata
sites <- nmds$points %>%
as_tibble(rownames = "rowname") %>%
left_join(metadata)
ggplot(sites, aes(x=MDS1, y=MDS2, color = site)) +
geom_point()
sites
ggplot(sites, aes(x=MDS1, y=MDS2, color = site, shape = eventID)) +
geom_point() +
theme_classic()
ggplot(sites, aes(x=MDS1, y=MDS2, color = eventID, shape = site)) +
geom_point() +
theme_classic()
ggplot(sites, aes(x=MDS1, y=MDS2, color = eventID, shape = site)) +
geom_point() +
theme_classic() +
scale_color_brewer(palette = "Dark2")
library(vegan)
# checking the metadata file to see where JORN stops and SRER begins
which(metadata$site == "JORN") %>% range()
which(metadata$site == "SRER") %>% range()
# performing and plotting the species accumulation curve analysis
sp_jorn <- vegan::specaccum(comm[1:152,])
sp_srer <- vegan::specaccum(comm[152:347,])
plot(sp_srer, col = "blue")
plot(sp_jorn, col = "gold", add=T)
document()
library(devtools)
document()
install()
update.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(sf)
st_read("/Users/Adam.Mahood/Desktop/All_NEON_TOS_Plots_V10/All_NEON_TOS_Plots_V10/All_NEON_TOS_Plot_Centroids_V10.shp") -> ppp
ppp
all_plots <- ppp
save("all_plots", file = "data/all_plots.rda")
all_plot_centroids <- ppp
save("all_plot_centroids", file = "data/all_plot_centroids.rda")
plot_centroids <- ppp
save("plot_centroids", file = "data/plot_centroids.rda")
library(tidyverse)
library(neonPlantEcology)
sites
data("plot_centroids")
plot_centroids
document()
library(devtools)
document()
check()
data(plot_centroids)
plot_centroids
plot_centroids %>% dplyr::select(appMods)
library(tidyverse)
library(neonPlantEcology)
library(vegan)
library(sf)
data("plot_centroids")
plot_centroids <- st_set_geometry(plot_centroids, NULL)
metadata <- npe_plot_info(comm) %>%
left_join(plot_centroids)
install(build_vignettes = TRUE)
plot_centroids
ggplot(nmds_sites, aes(x=MDS1, y=MDS2, color = elevation, shape = site)) +
geom_point() +
theme_classic() +
scale_color_brewer(palette = "Dark2")
nmds <- metaMDS(comm,trace = F)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(neonPlantEcology)
?envfit
vegan::envfit(nmds, nmds$species)
document()
install()\
install()
load_all()
data("D14")
npe_diversity_info(D14)
npe_diversity_info(D14) -> ddd
summary(ddd)
D14$div_1m2Data
D14$div_1m2Data$divDataType %>% unique()
D14$div_1m2Data$divDataType %>% select(divDataType)
D14$div_1m2Data$divDataType %>% dplyr::select(divDataType)
D14$div_1m2Data %>% dplyr::select(divDataType, taxonID)
D14$div_1m2Data %>% dplyr::filter(divDataType == "otherVariables" )
D14$div_10m2Data100m2Data %>% dplyr::filter(divDataType == "otherVariables" )
load_all()
npe_groundcover(D14)
load_all()
npe_groundcover(D14)
document()
neon_div_object <- D14
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(cover = sum(heightPlantSpecies, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6)) %>%
dplyr::ungroup()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(height = sum(heightPlantSpecies, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6)) %>%
dplyr::ungroup()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(height = sum(heightPlantOver300cm, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6)) %>%
dplyr::ungroup()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID)
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(height = sum(heightPlantOver300cm, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6))
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(height = sum(heightPlantSpecies, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6))
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>% dplyr::select(heightPlantOver300cm)
neon_div_object$div_1m2Data$heightPlantSpecies
neon_div_object$div_1m2Data$heightPlantOver300cm
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(height = sum(heightPlantSpecies, na.rm=FALSE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6)) %>%
dplyr::ungroup()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(
height = sum(heightPlantSpecies, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
all_na = all(is.na(heightPlantSpecies))) %>%
dplyr::ungroup()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(
height = sum(heightPlantSpecies, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
all_na = all(is.na(heightPlantSpecies))) %>%
dplyr::ungroup()  %>%
dplyr::group_by(plotID, otherVariables, eventID, all_na) %>%
dplyr::summarise(height = sum(height)) %>%
dplyr::ungroup() %>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4),
subplotID = "plot")%>%
tibble::as_tibble()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(
height = sum(heightPlantSpecies, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
all_na = all(is.na(heightPlantSpecies))) %>%
dplyr::ungroup()  %>%
dplyr::group_by(plotID, taxonID, eventID, all_na) %>%
dplyr::summarise(height = sum(height)) %>%
dplyr::ungroup() %>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4),
subplotID = "plot")%>%
tibble::as_tibble()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(
height = sum(heightPlantSpecies, na.rm=TRUE)/ifelse(
as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
all_na = all(is.na(heightPlantSpecies))) %>%
dplyr::ungroup()  %>%
dplyr::group_by(plotID, taxonID, eventID, all_na) %>%
dplyr::summarise(height = sum(height)) %>%
dplyr::ungroup() %>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4),
subplotID = "plot")%>%
filter(!all_na) %>%
tibble::as_tibble()
neon_div_object$div_1m2Data %>%
dtplyr::lazy_dt() %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
# tidyr::replace_na(list(percentCover=0.5)) %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, eventID) %>%
dplyr::summarise(
height = mean(heightPlantSpecies, na.rm=TRUE),
all_na = all(is.na(heightPlantSpecies))) %>%
dplyr::ungroup()  %>%
dplyr::group_by(plotID, taxonID, eventID, all_na) %>%
dplyr::summarise(height = sum(height)) %>%
dplyr::ungroup() %>%
dplyr::mutate(site = stringr::str_sub(plotID, 1,4),
subplotID = "plot")%>%
filter(!all_na) %>%
tibble::as_tibble()
load_all()
npe_heights(D14)
npe_heights(D14, scale="site")
load_all()
npe_heights(D14, scale="site")
npe_heights(D14, scale="plot")
document()
install()
document()
