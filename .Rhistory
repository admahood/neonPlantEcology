pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(gen, " ", sp)) %>%
dplyr::mutate(genus = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
species = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(genus, " ", species))
rc_sp <- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, rel_cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "relative_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp) %>%
dplyr::summarise(rel_cover = mean(rel_cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
c_sp<- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "absolute_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp, variable) %>%
dplyr::summarise(cover = mean(cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (cover),
values_fill = list(cover = 0))
return(list(c_sp, rc_sp))
}
#' get single species cover
#'
#' This extracts the cover of a single species from the diversity object
#'
#' @param sp the genus and species of the species in a string
#' @export
# Cover by species ===========================================================
npe_species <- function(neon_div_object,
sp = "all",
scale = "plot",
trace_cover = 0.5,
fix_unks = FALSE,
dissolve_years = FALSE,
name_cleaner = FALSE) {
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
# Data wrangling =============================================================
full_on_cover <- npe_longform(neon_div_object,
scale = scale,
dissolve_years = dissolve_years,
fix_unks = fix_unks)
if(name_cleaner) full_on_cover <- name_cleaner(full_on_cover)
template <- full_on_cover %>%
dplyr::select(site, plotID, subplotID, year)
bysp <- full_on_cover%>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID, year, scientificName) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup() %>%
dplyr::mutate(gen = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
sp = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(gen, " ", sp)) %>%
dplyr::mutate(genus = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
species = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(genus, " ", species))
rc_sp <- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, rel_cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "relative_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp) %>%
dplyr::summarise(rel_cover = mean(rel_cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
c_sp<- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "absolute_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp, variable) %>%
dplyr::summarise(cover = mean(cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (cover),
values_fill = list(cover = 0))
if(sp != "all") c_sp <- dplyr::select(c_sp, site, plotID, subplotID,year, gen_sp, variable, sp)
if(sp != "all") rc_sp <- dplyr::select(rc_sp, site, plotID, subplotID,year, gen_sp, variable, sp)
return(list(c_sp, rc_sp))
}
#' get single species cover
#'
#' This extracts the cover of a single species from the diversity object
#'
#' @param sp the genus and species of the species in a string
#' @export
# Cover by species ===========================================================
npe_species <- function(neon_div_object,
sp = "all",
scale = "plot",
trace_cover = 0.5,
fix_unks = FALSE,
dissolve_years = FALSE,
name_cleaner = FALSE) {
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
# Data wrangling =============================================================
full_on_cover <- npe_longform(neon_div_object,
scale = scale,
dissolve_years = dissolve_years,
fix_unks = fix_unks)
if(name_cleaner) full_on_cover <- name_cleaner(full_on_cover)
template <- full_on_cover %>%
dplyr::select(site, plotID, subplotID, year)
bysp <- full_on_cover%>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID, year, scientificName) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup() %>%
dplyr::mutate(gen = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
sp = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(gen, " ", sp)) %>%
dplyr::mutate(genus = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
species = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(genus, " ", species))
rc_sp <- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, rel_cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "relative_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp) %>%
dplyr::summarise(rel_cover = mean(rel_cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
c_sp<- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "absolute_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp, variable) %>%
dplyr::summarise(cover = mean(cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (cover),
values_fill = list(cover = 0))
if(sp != "all") c_sp <- dplyr::select(c_sp, site, plotID, subplotID,year, gen_sp, variable, sp)
if(sp != "all") rc_sp <- dplyr::select(rc_sp, site, plotID, subplotID,year, gen_sp, variable, sp)
return(list(c_sp, rc_sp))
}
npe_species(d, sp = "all")
npe_species(d, sp = "Achnatherum_hymenoides")
#' get single species cover
#'
#' This extracts the cover of a single species from the diversity object
#'
#' @param sp the genus and species of the species in a string
#' @export
# Cover by species ===========================================================
npe_species <- function(neon_div_object,
sp = "all",
scale = "plot",
trace_cover = 0.5,
fix_unks = FALSE,
dissolve_years = FALSE,
name_cleaner = FALSE) {
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
# Data wrangling =============================================================
full_on_cover <- npe_longform(neon_div_object,
scale = scale,
dissolve_years = dissolve_years,
fix_unks = fix_unks)
if(name_cleaner) full_on_cover <- name_cleaner(full_on_cover)
template <- full_on_cover %>%
dplyr::select(site, plotID, subplotID, year)
bysp <- full_on_cover%>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID, year, scientificName) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup() %>%
dplyr::mutate(gen = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
sp = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(gen, " ", sp)) %>%
dplyr::mutate(genus = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
species = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(genus, " ", species))
rc_sp <- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, rel_cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "relative_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp) %>%
dplyr::summarise(rel_cover = mean(rel_cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
c_sp<- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "absolute_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp, variable) %>%
dplyr::summarise(cover = mean(cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (cover),
values_fill = list(cover = 0))
if(sp != "all") c_sp <- dplyr::select(c_sp, site, plotID, subplotID,year, gen_sp, variable, .sp)
if(sp != "all") rc_sp <- dplyr::select(rc_sp, site, plotID, subplotID,year, gen_sp, variable, .sp)
return(list(c_sp, rc_sp))
}
npe_species(d, sp = "Achnatherum_hymenoides")
#' get single species cover
#'
#' This extracts the cover of a single species from the diversity object
#'
#' @param sp the genus and species of the species in a string
#' @export
# Cover by species ===========================================================
npe_species <- function(neon_div_object,
spp = "all",
scale = "plot",
trace_cover = 0.5,
fix_unks = FALSE,
dissolve_years = FALSE,
name_cleaner = FALSE) {
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
# Data wrangling =============================================================
full_on_cover <- npe_longform(neon_div_object,
scale = scale,
dissolve_years = dissolve_years,
fix_unks = fix_unks)
if(name_cleaner) full_on_cover <- name_cleaner(full_on_cover)
template <- full_on_cover %>%
dplyr::select(site, plotID, subplotID, year)
bysp <- full_on_cover%>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID, year, scientificName) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup() %>%
dplyr::mutate(gen = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
sp = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(gen, " ", sp)) %>%
dplyr::mutate(genus = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
species = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(genus, " ", species))
rc_sp <- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, rel_cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "relative_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp) %>%
dplyr::summarise(rel_cover = mean(rel_cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
c_sp<- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "absolute_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp, variable) %>%
dplyr::summarise(cover = mean(cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (cover),
values_fill = list(cover = 0))
if(sp != "all") c_sp <- dplyr::select(c_sp, site, plotID, subplotID,year, gen_sp, variable, spp)
if(sp != "all") rc_sp <- dplyr::select(rc_sp, site, plotID, subplotID,year, gen_sp, variable, spp)
return(list(c_sp, rc_sp))
}
npe_species(d, spp = "Achnatherum_hymenoides")
#' get single species cover
#'
#' This extracts the cover of a single species from the diversity object
#'
#' @param sp the genus and species of the species in a string
#' @export
# Cover by species ===========================================================
npe_species <- function(neon_div_object,
spp = "all",
scale = "plot",
trace_cover = 0.5,
fix_unks = FALSE,
dissolve_years = FALSE,
name_cleaner = FALSE) {
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
# Data wrangling =============================================================
full_on_cover <- npe_longform(neon_div_object,
scale = scale,
dissolve_years = dissolve_years,
fix_unks = fix_unks)
if(name_cleaner) full_on_cover <- name_cleaner(full_on_cover)
template <- full_on_cover %>%
dplyr::select(site, plotID, subplotID, year)
bysp <- full_on_cover%>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID, year, scientificName) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup() %>%
dplyr::mutate(gen = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
sp = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(gen, " ", sp)) %>%
dplyr::mutate(genus = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
species = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(genus, " ", species))
rc_sp <- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, rel_cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "relative_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp) %>%
dplyr::summarise(rel_cover = mean(rel_cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
c_sp<- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "absolute_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp, variable) %>%
dplyr::summarise(cover = mean(cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (cover),
values_fill = list(cover = 0))
if(spp != "all") c_sp <- dplyr::select(c_sp, site, plotID, subplotID,year, gen_sp, variable, spp)
if(spp != "all") rc_sp <- dplyr::select(rc_sp, site, plotID, subplotID,year, gen_sp, variable, spp)
return(list(c_sp, rc_sp))
}
npe_species(d, spp = "Achnatherum_hymenoides")
#' get single species cover
#'
#' This extracts the cover of a single species from the diversity object
#'
#' @param sp the genus and species of the species in a string
#' @export
# Cover by species ===========================================================
npe_species <- function(neon_div_object,
scale = "plot",
trace_cover = 0.5,
fix_unks = FALSE,
dissolve_years = FALSE,
name_cleaner = FALSE) {
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
# Data wrangling =============================================================
full_on_cover <- npe_longform(neon_div_object,
scale = scale,
dissolve_years = dissolve_years,
fix_unks = fix_unks)
if(name_cleaner) full_on_cover <- name_cleaner(full_on_cover)
template <- full_on_cover %>%
dplyr::select(site, plotID, subplotID, year)
bysp <- full_on_cover%>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID, year, scientificName) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup() %>%
dplyr::mutate(gen = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
sp = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(gen, " ", sp)) %>%
dplyr::mutate(genus = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,1],
species = stringr::str_split(scientificName,
pattern = " ",
simplify = TRUE)[,2],
gen_sp = stringr::str_c(genus, " ", species))
rc_sp <- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, rel_cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "relative_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp) %>%
dplyr::summarise(rel_cover = mean(rel_cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
c_sp<- bysp%>%
dplyr::select(site, plotID, subplotID,year, gen_sp, cover) %>%
dplyr::mutate(gen_sp = stringr::str_replace(gen_sp, " ","_"),
variable = "absolute_cover") %>%
# the following 3 lines fix some kind of duplicate problem that happened here
# need to fix something upstream - jan 14 fixed it, need to test still
dplyr::group_by(site, plotID, subplotID,year, gen_sp, variable) %>%
dplyr::summarise(cover = mean(cover)) %>%
dplyr::ungroup()%>%
tidyr::pivot_wider(names_from = gen_sp,
values_from = (cover),
values_fill = list(cover = 0))
return(list(c_sp, rc_sp))
}
npe_species(d)
npe_community_matrix(d)
document
document()
build()
install()
