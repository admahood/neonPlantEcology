"B" ~ "Arid",
"A" ~ "Equatorial",
"C" ~ "Temperate",
"D" ~ "Boreal",
"E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
ungroup()
sites
sites <- site_polygons %>%
group_by(siteID) %>%
summarise(koppen_fine = lut_kop[terra::extract(koppen, ., fun = "median", ID=FALSE) %>% unlist()],
koppen_coarse = case_match(stringr::str_sub(koppen_fine,1,1),
"B" ~ "Arid",
"A" ~ "Equatorial",
"C" ~ "Temperate",
"D" ~ "Boreal",
"E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
ungroup() %>%
st_set_geometry(NULL)
sites <- site_polygons %>%
st_centroid() %>%
group_by(siteID) %>%
summarise(koppen_fine = lut_kop[terra::extract(koppen, ., fun = "median", ID=FALSE) %>% unlist()],
koppen_coarse = case_match(stringr::str_sub(koppen_fine,1,1),
"B" ~ "Arid",
"A" ~ "Equatorial",
"C" ~ "Temperate",
"D" ~ "Boreal",
"E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
ungroup() %>%
st_set_geometry(NULL)
sites <- site_polygons %>%
st_buffer(dist =0.1) %>%
group_by(siteID) %>%
summarise(koppen_fine = lut_kop[terra::extract(koppen, ., fun = "median", ID=FALSE) %>% unlist()],
koppen_coarse = case_match(stringr::str_sub(koppen_fine,1,1),
"B" ~ "Arid",
"A" ~ "Equatorial",
"C" ~ "Temperate",
"D" ~ "Boreal",
"E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
ungroup() %>%
st_set_geometry(NULL)
sites <- site_polygons %>%
st_make_valid() %>%
group_by(siteID) %>%
summarise(koppen_fine = lut_kop[terra::extract(koppen, ., fun = "median", ID=FALSE) %>% unlist()],
koppen_coarse = case_match(stringr::str_sub(koppen_fine,1,1),
"B" ~ "Arid",
"A" ~ "Equatorial",
"C" ~ "Temperate",
"D" ~ "Boreal",
"E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
ungroup() %>%
st_set_geometry(NULL)
sites <- site_polygons %>%
st_make_valid() %>%
group_by(siteID) %>%
mutate(koppen_fine = lut_kop[terra::extract(koppen, ., fun = "median", ID=FALSE) %>% unlist()],
koppen_coarse = case_match(stringr::str_sub(koppen_fine,1,1),
"B" ~ "Arid",
"A" ~ "Equatorial",
"C" ~ "Temperate",
"D" ~ "Boreal",
"E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
ungroup() %>%
st_set_geometry(NULL)
sites <- site_polygons %>%
st_make_valid() %>%
group_by(siteID) %>%
summarise(#koppen_fine = lut_kop[terra::extract(koppen, ., fun = "median", ID=FALSE) %>% unlist()],
#koppen_coarse = case_match(stringr::str_sub(koppen_fine,1,1),
#                          "B" ~ "Arid",
#                         "A" ~ "Equatorial",
#                        "C" ~ "Temperate",
#                       "D" ~ "Boreal",
#                      "E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
ungroup() %>%
st_set_geometry(NULL)
sites <- site_polygons %>%
mutate(koppen_fine = lut_kop[terra::extract(koppen, ., fun = "median", ID=FALSE) %>% unlist()],
koppen_coarse = case_match(stringr::str_sub(koppen_fine,1,1),
"B" ~ "Arid",
"A" ~ "Equatorial",
"C" ~ "Temperate",
"D" ~ "Boreal",
"E" ~ "Polar"),
ai = terra::extract(ai, ., fun = "mean", ID=FALSE) %>% unlist()/10000,
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) %>%
st_set_geometry(NULL)
sites
?weighted.mean()
sites |>
group_by(siteID) |>
arrange(desc(areaKm2)) |>
summarise(koppen_fine = first(koppen_fine),
koppen_coarse = first(koppen_coarse),
ai = weighted.mean(ai, areaKm2)) |>
ungroup()
glimpse(sites)
sites1 <- sites |>
group_by(siteID) |>
arrange(desc(areaKm2)) |>
summarise(koppen_fine = first(koppen_fine),
koppen_coarse = first(koppen_coarse),
ai = weighted.mean(ai, areaKm2),
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) |>
ungroup()
sites1 <- sites |>
group_by(domainNumb, domainName, siteType, siteID) |>
arrange(desc(areaKm2)) |>
summarise(koppen_fine = first(koppen_fine),
koppen_coarse = first(koppen_coarse),
ai = weighted.mean(ai, areaKm2),
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) |>
ungroup();sites1
sites <- sites |>
group_by(domainNumb, domainName, siteType, siteID) |>
arrange(desc(areaKm2)) |>
summarise(koppen_fine = first(koppen_fine),
koppen_coarse = first(koppen_coarse),
ai = weighted.mean(ai, areaKm2),
ai_class = case_when(ai < 0.03 ~ 'Hyper Arid',
ai >= 0.03 & ai < 0.2 ~ 'Arid',
ai >= 0.2 & ai < 0.5~ 'Semi-Arid',
ai >= 0.5 & ai < 0.65 ~ 'Dry sub-humid',
ai >= 0.65 ~ "Humid")) |>
ungroup();sites
save(sites, file = "data/sites.rda")
for(i in names(sites)){
print(i)
print(sites |> dplyr::pull(i) |> paste(collapse = "', '"))
}
data.frame(
"ai_class" = c('Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Arid', 'Arid', 'Arid', 'Arid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Dry sub-humid', 'Dry sub-humid', 'Semi-Arid', 'Dry sub-humid', 'Semi-Arid', 'Humid', 'Humid'),
)
data.frame(
ai_class = c('Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Arid', 'Arid', 'Arid', 'Arid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Dry sub-humid', 'Dry sub-humid', 'Semi-Arid', 'Dry sub-humid', 'Semi-Arid', 'Humid', 'Humid'),
)
data.frame(
ai_class = c('Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Arid', 'Arid', 'Arid', 'Arid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Dry sub-humid', 'Dry sub-humid', 'Semi-Arid', 'Dry sub-humid', 'Semi-Arid', 'Humid', 'Humid')
)
data.frame(
"ai_class" = c('Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Dry sub-humid', 'Dry sub-humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Semi-Arid', 'Arid', 'Arid', 'Arid', 'Arid', 'Humid', 'Humid', 'Semi-Arid', 'Semi-Arid', 'Dry sub-humid', 'Dry sub-humid', 'Semi-Arid', 'Dry sub-humid', 'Semi-Arid', 'Humid', 'Humid')
)
for(i in names(sites)){
print(i)
print(sites |> dplyr::pull(i) |> paste(collapse = "', '"))
}
print(sites |> dplyr::pull(i) |> paste(collapse = ", "))
for(i in names(sites)){
print(i)
print(sites |> dplyr::pull(i) |> paste(collapse = ", "))
}
names(sites)
load_all()
document()
check()
usethis::use_import_from("utils", "data")
check()
check()
load_all()
document()
check(remotes=T, manual=T)
check(remote=T, manual=T)
load_all()
document()
check(remote=T, manual=T)
devtools::check_man()
load_all()
npe_download("BART") -> bb
npe_diversity_info(bb)
npe_download("ABBY") -> abb
npe_diversity_info(abb)
summary(bb$div_1m2Data)
neon_div_object <- bb
npe_longform(bb)
trace_cover=0.5
scale = "plot"
timescale = "annual"
neon_div_object <- npe_update_subplots(neon_div_object)
cover <- neon_div_object$div_1m2Data |>
dtplyr::lazy_dt() |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::mutate(eventID = stringr::str_replace_all(eventID, "JORN022", "JORN.1.2022")) |>
# dplyr::mutate(endDate = as.Date(endDate)) |>
dplyr::filter(divDataType == "plantSpecies") |>
tidyr::replace_na(list(percentCover=trace_cover)) |>
dplyr::filter(taxonID != "") |>
dplyr::group_by(plotID, taxonID, eventID) |>
dplyr::summarise(cover = sum(percentCover, na.rm=TRUE)/ifelse(as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) |>
dplyr::ungroup() |>
tibble::as_tibble()
traces <- neon_div_object$div_10m2Data100m2Data |>
dtplyr::lazy_dt() |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::mutate(eventID = stringr::str_replace_all(eventID, "JORN022", "JORN.1.2022")) |>
dplyr::mutate(endDate = as.Date(endDate)) |>
dplyr::filter(targetTaxaPresent == "Y") |>
dplyr::group_by(plotID, subplotID, taxonID, eventID) |>
dplyr::summarise(cover = trace_cover,
# endDate = first(endDate),
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) |>
dplyr::ungroup() |>
dplyr::filter(taxonID != "") |>
dplyr::group_by(plotID, taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/ifelse(as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
# endDate = first(endDate),
family = first(family)) |>
dplyr::ungroup() |>
tibble::as_tibble()
full_on_cover <- dplyr::bind_rows(cover, traces) |>
dplyr::group_by(plotID, taxonID, eventID, nativeStatusCode, scientificName, family) |>
dplyr::summarise(cover = sum(cover)) |>
dplyr::ungroup() |>
tidyr::replace_na(list(family = "Unknown")) |>
dplyr::mutate(site = stringr::str_sub(plotID, 1,4),
subplotID = "plot")
full_on_cover <- full_on_cover |>
tidyr::separate(eventID, into = c("site_plot", "bout", "eventID"),sep = "\\.",remove = F)
year_range <- unique(full_on_cover$eventID) |>
as.numeric() |>
range() |>
paste(collapse = "-")
n_years <- length(unique(full_on_cover$eventID))
full_on_cover <- full_on_cover |>
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName,
family, site, subplotID) |>
dplyr::summarise(cover = sum(cover, na.rm=T)/n_years) |>
dplyr::ungroup() |>
dplyr::mutate(eventID = year_range)
full_on_cover <- dplyr::bind_rows(cover, traces) |>
dplyr::group_by(plotID, taxonID, eventID, nativeStatusCode, scientificName, family) |>
dplyr::summarise(cover = sum(cover)) |>
dplyr::ungroup() |>
tidyr::replace_na(list(family = "Unknown")) |>
dplyr::mutate(site = stringr::str_sub(plotID, 1,4),
subplotID = "plot")
full_on_cover <- full_on_cover  |>
tidyr::separate(eventID, into = c("site_plot", "bout", "eventID"),
sep = "\\.",remove = F)
full_on_cover <- full_on_cover |>
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName,
family, site, subplotID,eventID) |>
dplyr::summarise(cover = max(cover, na.rm=T)) |>
dplyr::ungroup()
full_on_cover$cover
full_on_cover$cover %>% summary()
filter(full_on_cover, is.infinite())
filter(full_on_cover, is.infinite(full_on_cover))
is.infinite(full_on_cover$cover)
is.infinite(full_on_cover$cover) %>% filter(full_on_cover, .)
bb$div_10m2Data100m2Data$eventID %>% unique()
bb$div_1m2Data$eventID %>% unique()
cover <- neon_div_object$div_1m2Data |>
dtplyr::lazy_dt() |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::mutate(eventID = stringr::str_replace_all(eventID, "JORN022", "JORN.1.2022")) |>
dplyr::mutate(endDate = as.Date(endDate)) |>
dplyr::filter(divDataType == "plantSpecies") |>
tidyr::replace_na(list(percentCover=trace_cover)) |>
dplyr::filter(taxonID != "") |>
dplyr::group_by(plotID, taxonID, eventID) |>
dplyr::summarise(cover = sum(percentCover, na.rm=TRUE)/ifelse(as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) |>
dplyr::ungroup() |>
tibble::as_tibble()
bb$div_1m2Data$eventID %>% unique()
filter(is.na(bb$div_1m2Data$eventID)) %>% dplyr::select(endDate, eventID, cover)
bb$div_1m2Data %>% filter(is.na(bb$div_1m2Data$eventID)) %>% dplyr::select(endDate, eventID, cover)
bb$div_1m2Data %>% filter(is.na(bb$div_1m2Data$eventID))
bb$div_1m2Data %>% filter(is.na(bb$div_1m2Data$eventID)) %>% dplyr::select(endDate, eventID, percentCover)
bb
x<-bb
# check if there are any non-standard event ids
any(is.na(x$div_10m2Data100m2Data$eventID))
any(is.na(x$div_1m2Data$eventID))
# how many bouts are there?
x$div_1m2Data$eventID %>% unique()
# how many bouts are there?
x$div_1m2Data$eventID %>% unique() %>%
tidyr::separate(by = "\\.")
# how many bouts are there?
x$div_1m2Data$eventID %>% unique() %>%
tidyr::separate(by = ".")
# how many bouts are there?
x$div_1m2Data$eventID %>% unique() %>%
tidyr::separate(sep = "\.")
# how many bouts are there?
x$div_1m2Data$eventID %>% unique() %>%
tidyr::separate(sep = "\\.")
# how many bouts are there?
x$div_1m2Data$eventID %>%
unique() %>%
stringr::str_split("\\.")
?str_split
# how many bouts are there?
x$div_1m2Data$eventID %>%
unique() %>%
stringr::str_split_2("\\.")
# how many bouts are there?
x$div_1m2Data$eventID %>%
unique() %>%
stringr::str_split_i("\\.", 2)
# how many bouts are there?
x$div_1m2Data$eventID %>%
unique() %>%
stringr::str_split_i("\\.", 2) %>%
unique() %>%
na.omit()
# how many bouts are there?
x$div_1m2Data$eventID %>%
unique() %>%
stringr::str_split_i("\\.", 2) %>%
unique()
any(nchar(x$div_10m2Data100m2Data$eventID) != 11)
nchar(x$div_10m2Data100m2Data$eventID)
na.omit(nchar(x$div_10m2Data100m2Data$eventID))
all(na.omit(nchar(x$div_10m2Data100m2Data$eventID)) != 11)
all(na.omit(nchar(x$div_1m2Data$eventID)) != 11)
yy <- npe_download("SRER")
all(na.omit(nchar(yy$div_10m2Data100m2Data$eventID)) != 11)
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID) |>
unique()
all_event_ids
data("D14")
all(na.omit(nchar(D14$div_10m2Data100m2Data$eventID)) != 11)
D14$div_1m2Data$eventID |> unique()
# check if there are any non-standard event ids
any(is.na(D14$div_10m2Data100m2Data$eventID))
# check if there are any non-standard event ids
any(is.na(x$div_10m2Data100m2Data$eventID))
# how many bouts are there?
x$div_1m2Data$eventID %>%
unique() %>%
stringr::str_split_i("\\.", 2) %>%
unique()
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
sum(is.na(all_event_ids))
x$div_1m2Data |>
dplyr::filter(!is.na(eventID)) |>
dplyr::pull(eventID) |>
unique() |>
stringr::str_split_i("\\.", 2) |>
unique()
# how many bouts are there?
bouts <- x$div_1m2Data |>
dplyr::filter(!is.na(eventID)) |>
dplyr::pull(eventID) |>
unique() |>
stringr::str_split_i("\\.", 2) |>
unique()
bouts
length(bouts)==1
x$div_1m2Data$endDate
x$div_1m2Data %>% glimpse()
x$div_1m2Data <-
x$div_1m2Data |>
mutate(ifelse(is.na(eventID),
eventID = paste(siteID,
"1",
stringr::str_sub(endDate,1,4)),
eventID))
x$div_1m2Data <-
x$div_1m2Data |>
mutate(ifelse(is.na(eventID),
eventID = paste(siteID,
"1",
stringr::str_sub(endDate,1,4),
collapse = "."),
eventID))
x$div_1m2Data <-
x$div_1m2Data |>
mutate(ifelse(is.na(eventID),
eventID = stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4)),
eventID))
x$div_1m2Data <-
x$div_1m2Data |>
mutate(ifelse(is.na(eventID),
eventID = stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4),
eventID)))
x$div_1m2Data <-
x$div_1m2Data |>
mutate(ifelse(is.na(eventID),
eventID = stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4)),
eventID))
x$div_1m2Data |>
mutate(ifelse(
is.na(eventID),
eventID = stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4)),
eventID)
)
x$div_1m2Data |>
mutate(eventID = ifelse(
is.na(eventID),
stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4)),
eventID)
)
x$div_1m2Data <-
x$div_1m2Data |>
mutate(eventID = ifelse(
is.na(eventID),
stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4)),
eventID)
)
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
n <- sum(is.na(all_event_ids))
sum(is.na(all_event_ids))
x <- bb
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
sum(is.na(all_event_ids))
x$div_1m2Data <-
x$div_1m2Data |>
mutate(eventID = ifelse(
is.na(eventID),
stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4)),
eventID)
)
x$div_10m2Data100m2Data <-
x$div_10m2Data100m2Data |>
mutate(eventID = ifelse(
is.na(eventID),
stringr::str_c(siteID, "\\.",
"1", "\\.",
stringr::str_sub(endDate,1,4)),
eventID)
)
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
sum(is.na(all_event_ids))
load_all(0)
load_all()
document()
check()
load_all()
check()
