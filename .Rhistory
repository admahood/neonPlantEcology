paste(collapse = "-")
n_years <- length(unique(full_on_cover$year))
full_on_cover <- full_on_cover %>%
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
dplyr::summarise(cover = sum(cover, na.rm=T)/n_years) %>%
dplyr::ungroup() %>%
dplyr::mutate(year = year_range)
}
return(full_on_cover)
}
cover8 <- neon_div_object$div_1m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
# entries in the df with no values but species was there
# i.e. someone put the sp. code and forgot to fill in the number
# putting as trace cover value
tidyr::replace_na(list(percentCover=trace_cover)) %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the mean cover
# per sampling effort, without aggregating, then later we'll aggregate.
# that way, a fall-bloomer that isn't visible in spring, for example,
# will be given its full cover value for fall, but then a species
# that is there for both seasons will be averaged, if that makes sense
dplyr::summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()  %>%
dplyr::filter(taxonID != "") %>%
dplyr::mutate(subplotID = str_sub(subplotID, 1, 4))
# 10m2,100m2 are given 0.5 (we can change later)
# unique(x$div_10m2Data100m2Data$subplotID) # there are 12 subplots
traces8 <- neon_div_object$div_10m2Data100m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::filter(taxonID != "",
subplotID != "31", # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID != "32",
subplotID != "40",
subplotID != "41")  %>%
dplyr::mutate(subplotID = str_sub(subplotID, 1, 4))
traces100s <- neon_div_object$div_10m2Data100m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::mutate(site = str_sub(plotID, 1,4)) %>%
dplyr::filter(taxonID != "",
subplotID == "31"| # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID == "32"|
subplotID == "40"|
subplotID == "41")
# aggregating at different scales ----------------------------------------------
cover8_1m2 <- cover8 %>%
dplyr::group_by(plotID, subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = str_sub(plotID, 1,4))
if(fix_unks) cover8_1m2 <- unk_fixer(cover8_1m2)
cover8_1m2_10m2 <- rbind(cover8, traces8) %>%
dplyr::group_by(plotID,subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = str_sub(plotID, 1,4))
if(fix_unks) cover8_1m2_10m2<-cover8_1m2_10m2 %>%  unk_fixer()
cover4 <- cover8_1m2_10m2 %>%
dplyr::mutate(subplotID = str_sub(subplotID, 1,2)) %>%
dplyr::bind_rows(traces100s) %>% # adding in the 100m2 subplots
dplyr::group_by(plotID, subplotID, year, taxonID) %>%
dplyr::summarise(cover = sum(cover), # this is summing together repeats from the rbinding
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family),
site = first(site)) %>%
dplyr::ungroup()
if(fix_unks) cover4 <- cover4 %>%  unk_fixer()
if(scale == "1m") full_on_cover <- cover8_1m2
if(scale == "10m") full_on_cover <- cover8_1m2_10m2
if(scale == "100m") full_on_cover <- cover4
if(dissolve_years) {
year_range <- unique(full_on_cover$year)%>%
as.numeric %>%
range %>%
paste(collapse = "-")
n_years <- length(unique(full_on_cover$year))
full_on_cover <- full_on_cover %>%
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
dplyr::summarise(cover = sum(cover, na.rm=T)/n_years) %>%
dplyr::ungroup() %>%
dplyr::mutate(year = year_range)
}
return(full_on_cover)
}
load("data/all_div_site.Rda")
get_longform_cover(x)
get_longform_cover(all)
all
x
neondiveRsity::download_plant_div("SRER") -> neon_div_object
get_longform_cover(neon_div_object)
devtools::check()
devtools::check()
devtools::check()
?gsub
devtools::check()
use_mit_license()
document()
devtools::install()
devtools::check()
devtools::install()
check()
library(devtools)
check()
?vegify
library(neondiveRsity)
?vegify
install()
install.packages("pbkrtest")
remove.packages('pbkrtest')
install()
library(devtools)
check()
install()
library(tidyverse)
library(neonUtilities)
library(neonPlantEcology)
library(neonPlants)
devtools::install_github("admahood/neonPlantEcology")
install.packages("rmarkdown")
install.packages("bslib")
install.packages("jquerylib")
install.packages("bslib")
install.packages("rmarkdown")
devtools::install_github("admahood/neonPlantEcology")
devtools::install_github("NEONScience/neonPlants")
library(tidyverse)
library(neonUtilities)
library(neonPlantEcology)
library(neonPlants)
# data get =====================================================================
allDiv <- neonPlantEcology::npe_download_plant_div()
devtools::install_github("admahood/neonPlantEcology")
devtools::install_github("admahood/neonPlantEcology", force=TRUE\)
devtools::install_github("admahood/neonPlantEcology", force=TRUE)
check()
library(devtools)
document()
build()
install()
install.packages("lubridate")
install.packages("timechange")
install.packages("lubridate")
install()
library(tidyverse)
library(neonUtilities)
library(neonPlantEcology)
library(neonPlants)
library(tidyverse)
library(neonUtilities)
library(neonPlantEcology)
library(neonPlants)
document()
library(devtools)
install.packages("devtools")
library(devtools)
document()
check()
build()
install()
check()
library(devtools)
check
check()
check()
document()
build()
check()
install()
check()
library(devtools)
load_all()
library(sf)
dd<-st_read("/Users/Adam.Mahood/Desktop/Field_Sampling_Boundaries_2020/terrestrialSamplingBoundaries.shp")
dd
st_write(dd, "sites.gpkg")
st_write(dd, "data/sites.gpkg")
dir.create("data")
st_write(dd, "data/sites.gpkg")
sites <- dd
save(sites, "data/sites.rda")
save(sites, file = "data/sites.rda")
load("data/sites.rda")
sites
unique(dd$domainNumb)
unique(dd$domainNumb) %>% paste(sep = ",")
unique(dd$domainNumb) %>% paste(collapse = ",")
unique(dd$domainNumb) %>% paste(collapse = "','")
pull(sites, siteID)
sites$siteID
unique(sites$siteType)
plot(sites[1,0])
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domainNumb can be one or more domain codes,
#' e.g. domainNumb = c("D01", "D14")
#' @param siteTYpe can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = F, domainNumb = NA, siteType = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- filter(sites, domainNumb %in% domainNumb)
if(!is.na(domain)) sites <- filter(sites, siteType %in% siteTYpe)
}
npe_site_ids(domainNumb = c("D01", "D14"))
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domainNumb can be one or more domain codes,
#' e.g. domainNumb = c("D01", "D14")
#' @param siteTYpe can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = F, domainNumb = NA, siteType = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domainNumb)) sites <- filter(sites, domainNumb %in% domainNumb)
if(!is.na(siteType)) sites <- filter(sites, siteType %in% siteTYpe)
}
npe_site_ids(domainNumb = c("D01", "D14"))
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domainNumb can be one or more domain codes,
#' e.g. domainNumb = c("D01", "D14")
#' @param siteTYpe can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = F, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domainNumb)) sites <- filter(sites, domainNumb %in% domainNumb)
if(!is.na(siteType)) sites <- filter(sites, siteType %in% siteTYpe)
}
npe_site_ids(domain = c("D01", "D14"))
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domainNumb can be one or more domain codes,
#' e.g. domainNumb = c("D01", "D14")
#' @param siteTYpe can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = F, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- filter(sites, domainNumb %in% domainNumb)
if(!is.na(type)) sites <- filter(sites, siteType %in% siteTYpe)
}
npe_site_ids(domain = c("D01", "D14"))
load("data/sites.rda")
sites
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domainNumb can be one or more domain codes,
#' e.g. domainNumb = c("D01", "D14")
#' @param siteTYpe can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = F, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- filter(sites, domain %in% domainNumb)
if(!is.na(type)) sites <- filter(sites, type %in% siteTYpe)
}
npe_site_ids(domain = c("D01", "D14"))
filter(sites, domain %in% domainNumb)
domain = c("D01", "D14")
filter(sites, domain %in% domainNumb)
domain
filter(sites, domainNumb %in% domain)
sites
filter(sites, domainNumb == "D01")
sties
sites
sites %>% filter(acres>1)
library(dplyr)
filter(sites, domainNumb == "D01")
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = F, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- dplyr::filter(sites, domainNumb %in% domain)
if(!is.na(type)) sites <- dplyr::filter(sites, type %in% siteTYpe)
return(sites)
}
npe_site_ids(domain = c("D01", "D14"))
dplyr::filter(sites, domainNumb %in% domain)
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- dplyr::filter(sites, domainNumb %in% domain)
if(!is.na(type)) sites <- dplyr::filter(sites, type %in% siteTYpe)
return(sites)
}
npe_site_ids(all=T)
npe_site_ids(all=F)
npe_site_ids(all=F, domain = "D01")
npe_site_ids(all=F, domain = c("D01"))
npe_site_ids(all=F, domain = c("D01", "D02"))
library(tidyverse)
npe_site_ids(all=F, domain = c("D01", "D02"))
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- dplyr::filter(sites, domainNumb == domain)
if(!is.na(type)) sites <- dplyr::filter(sites, type == siteTYpe)
return(sites)
}
npe_site_ids(all=F, domain = c("D01", "D02"))
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- dplyr::filter(sites, domainNumb == domain)
if(!is.na(type)) sites <- dplyr::filter(sites, type == siteTYpe)
return(sites)
}
npe_site_ids(domain = "D01")
npe_site_ids(domain = c("D01", "D09"))
npe_site_ids(domain = c("D01", "D02"))
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain)) sites <- dplyr::filter(sites, domainNumb %in% domain)
if(!is.na(type)) sites <- dplyr::filter(sites, type %in% siteTYpe)
return(sites)
}
npe_site_ids(domain = c("D01", "D02"))
domain = c("D01", "D02")
domain
sites
filter(sites, domainNumb %in% domain)
!is.na(domain)
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!any(is.na(domain))) sites <- dplyr::filter(sites, domainNumb %in% domain)
if(!is.na(type)) sites <- dplyr::filter(sites, type %in% siteTYpe)
return(sites)
}
npe_site_ids(domain = c("D01", "D02"))
#' get site ids
#'
#' This uses the site boundary shapefile (obtainable by data('sites')) to get a
#' list of siteID codes to feed into npe_download.
#'
#' @param all if TRUE, returns a vector of all siteID codes
#' @param domain can be one or more domain codes,
#' e.g. domain = c("D01", "D14")
#' @param type can be "Core Terrestrial" or "Relocatable Terrestrial"
#' @export
npe_site_ids <- function(all = FALSE, domain = NA, type = NA){
load("data/sites.rda")
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("magrittr")
if(all) return(sites$siteID)
if(!is.na(domain[1])) sites <- dplyr::filter(sites, domainNumb %in% domain)
if(!is.na(type[1])) sites <- dplyr::filter(sites, type %in% siteTYpe)
return(sites)
}
npe_site_ids(domain = c("D01", "D02"))
library(dplyr)
load_all(0)
load_all()
load_all()
document()
build()
install()
check()
