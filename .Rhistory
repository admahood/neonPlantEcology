load_all()
document()
check()
devtools::check()
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
npe_download("JORN") -> x
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
all_event_ids
all_event_ids[nchar(all_event_ids) != 11]
nchar(all_event_ids[!is.na(all_event_ids)]) != 11
all_event_ids[nchar(!is.na(all_event_ids)) != 11] |> unique
all_event_ids[nchar(!is.na(all_event_ids)) != 11] |> unique()
x <- npe_download("BART")
all_event_ids[nchar(all_event_ids) != 11] |> unique()
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
all_event_ids[nchar(all_event_ids) != 11] |> unique()
if(any(is.na(all_event_ids)) || any(nchar(all_event_ids) != 11)){
nas <- sum(is.na(all_event_ids))
non_standards <- sum(nchar(all_event_ids[!is.na(all_event_ids)]) != 11)
eids <- dplyr::bind_rows(x$div_1m2Data  |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::filter(!is.na(eventID), nchar(eventID) == 11) |>
dplyr::select(endDate, eventID, siteID),
x$div_10m2Data100m2Data  |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::filter(!is.na(eventID), nchar(eventID) == 11) |>
dplyr::select(endDate, eventID, siteID)) |>
unique() |>
dplyr::mutate(lut = paste0(siteID, endDate))
lut_eid <- eids$eventID
names(lut_eid) <- eids$lut
# how many bouts are there? if there is only 1 bout, it's easy
bouts <- x$div_1m2Data |>
dplyr::filter(!is.na(eventID)) |>
dplyr::pull(eventID) |>
unique() |>
stringr::str_split_i("\\.", 2) |>
unique()
if(length(bouts)==1){
x$div_1m2Data <-
x$div_1m2Data |>
dplyr::mutate(eventID = ifelse(is.na(eventID),
stringr::str_c(siteID, "\\.", "1", "\\.", stringr::str_sub(endDate,1,4)),
eventID)
)
x$div_10m2Data100m2Data <-
x$div_10m2Data100m2Data |>
dplyr::mutate(eventID = ifelse(is.na(eventID),
stringr::str_c(siteID, "\\.", "1", "\\.", stringr::str_sub(endDate,1,4)),
eventID)
)
return(x)
}else{ # more than one bout
x$div_10m2Data100m2Data <-
x$div_10m2Data100m2Data |>
dplyr::mutate(lut = paste0(siteID, endDate),
eventID = ifelse(
is.na(eventID) | nchar(eventID) != 11,
lut_eid[lut],
eventID))
x$div_1m2Data <-
x$div_1m2Data |>
dplyr::mutate(lut = paste0(siteID, endDate),
eventID = ifelse(
is.na(eventID) | nchar(eventID) != 11,
lut_eid[lut],
eventID))
updated_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
print(paste(nas, "to", sum(is.na(updated_event_ids)), "NAs"))
print(paste(non_standards, "to", sum(nchar(updated_event_ids[!is.na(updated_event_ids)]) != 11), "non-standards"))
}
print(paste(sum(nas, non_standards), "rows were fixed in the eventID column"))
return(x)
}else{print("No NA's in eventID column");return(x)}
all_event_ids[nchar(all_event_ids) != 11] |> unique()
print(paste("The following eventID entries will be fixed, hopefully",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:\n",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:\n",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", \n")))
print(paste("The following eventID entries will be fixed, hopefully:\n",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:       ",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:"))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", "))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique()))
print(paste("The following eventID entries will be fixed, hopefully:"))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique()))
load_all()
document()
check()
devtools::check()
devtools::check(remote=T, manual=T)
devtools::install()
devtools::check(remote=T, manual=T)
library(devtools)
document()
check(manual = T, remote = T)
?replace
install()
devtools::submit_cran()
?loadByProduct
library(devtools)
load_all()
npe_download("JORN")
check(manual=T, remote=T)
load_all()
npe_download("BART")
load_all()
x <- npe_download("ABBY")
?loadByProduct
x <- npe_download("ABBY", startdate = "2020-01")
document()
check(manual=T, remote=T, cran=T)
install()
install()
