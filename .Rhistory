devtools::check()
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
npe_download("JORN") -> x
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
all_event_ids
all_event_ids[nchar(all_event_ids) != 11]
nchar(all_event_ids[!is.na(all_event_ids)]) != 11
all_event_ids[nchar(!is.na(all_event_ids)) != 11] |> unique
all_event_ids[nchar(!is.na(all_event_ids)) != 11] |> unique()
x <- npe_download("BART")
all_event_ids[nchar(all_event_ids) != 11] |> unique()
all_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
all_event_ids[nchar(all_event_ids) != 11] |> unique()
if(any(is.na(all_event_ids)) || any(nchar(all_event_ids) != 11)){
nas <- sum(is.na(all_event_ids))
non_standards <- sum(nchar(all_event_ids[!is.na(all_event_ids)]) != 11)
eids <- dplyr::bind_rows(x$div_1m2Data  |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::filter(!is.na(eventID), nchar(eventID) == 11) |>
dplyr::select(endDate, eventID, siteID),
x$div_10m2Data100m2Data  |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::filter(!is.na(eventID), nchar(eventID) == 11) |>
dplyr::select(endDate, eventID, siteID)) |>
unique() |>
dplyr::mutate(lut = paste0(siteID, endDate))
lut_eid <- eids$eventID
names(lut_eid) <- eids$lut
# how many bouts are there? if there is only 1 bout, it's easy
bouts <- x$div_1m2Data |>
dplyr::filter(!is.na(eventID)) |>
dplyr::pull(eventID) |>
unique() |>
stringr::str_split_i("\\.", 2) |>
unique()
if(length(bouts)==1){
x$div_1m2Data <-
x$div_1m2Data |>
dplyr::mutate(eventID = ifelse(is.na(eventID),
stringr::str_c(siteID, "\\.", "1", "\\.", stringr::str_sub(endDate,1,4)),
eventID)
)
x$div_10m2Data100m2Data <-
x$div_10m2Data100m2Data |>
dplyr::mutate(eventID = ifelse(is.na(eventID),
stringr::str_c(siteID, "\\.", "1", "\\.", stringr::str_sub(endDate,1,4)),
eventID)
)
return(x)
}else{ # more than one bout
x$div_10m2Data100m2Data <-
x$div_10m2Data100m2Data |>
dplyr::mutate(lut = paste0(siteID, endDate),
eventID = ifelse(
is.na(eventID) | nchar(eventID) != 11,
lut_eid[lut],
eventID))
x$div_1m2Data <-
x$div_1m2Data |>
dplyr::mutate(lut = paste0(siteID, endDate),
eventID = ifelse(
is.na(eventID) | nchar(eventID) != 11,
lut_eid[lut],
eventID))
updated_event_ids <- c(x$div_10m2Data100m2Data$eventID, x$div_1m2Data$eventID)
print(paste(nas, "to", sum(is.na(updated_event_ids)), "NAs"))
print(paste(non_standards, "to", sum(nchar(updated_event_ids[!is.na(updated_event_ids)]) != 11), "non-standards"))
}
print(paste(sum(nas, non_standards), "rows were fixed in the eventID column"))
return(x)
}else{print("No NA's in eventID column");return(x)}
all_event_ids[nchar(all_event_ids) != 11] |> unique()
print(paste("The following eventID entries will be fixed, hopefully",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:\n",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:\n",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", \n")))
print(paste("The following eventID entries will be fixed, hopefully:\n",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:       ",
paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste("The following eventID entries will be fixed, hopefully:"))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", ")))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique(), collapse = ", "))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique()))
print(paste("The following eventID entries will be fixed, hopefully:"))
print(paste(all_event_ids[nchar(all_event_ids) != 11] |> unique()))
load_all()
document()
check()
devtools::check()
devtools::check(remote=T, manual=T)
devtools::install()
devtools::check(remote=T, manual=T)
library(devtools)
document()
check(manual = T, remote = T)
?replace
install()
devtools::submit_cran()
?loadByProduct
library(devtools)
load_all()
npe_download("JORN")
check(manual=T, remote=T)
load_all()
npe_download("BART")
load_all()
x <- npe_download("ABBY")
?loadByProduct
x <- npe_download("ABBY", startdate = "2020-01")
document()
check(manual=T, remote=T, cran=T)
install()
install()
library(devtools)
document()
install()
library(load_all)
library(devtools)
document()
library(sf)
site_polygons <- st_read("/Users/Adam.Mahood/Desktop/Field_Sampling_Boundaries_2020/")
plot(site_polygons[0,0])
plot(site_polygons[1,1])
save(site_polygons, file = "data/site_polygons.rda", compression = "xz")
save(site_polygons, file = "data/site_polygons.rda", compression = "best")
save(site_polygons, file = "data/site_polygons.rda", compress = "xz")
load_all()
documment()
library(devtools)
document()
check()
install()
devtools::submit_cran()
devtools::submit_cran()
<<<<<<< Updated upstream
library(devtools)
npe_site_ids()
load_all()
npe_site_ids()
error()
?warning()
load_all()''
load_all()
npe_site_ids()
??neonPlantEcology
document()
??neonPlantEcology
library(neonPlantEcology)
library(tidyverse)
install.packages(neonPlantEcology)
install.packages('neonPlantEcology')
install.packages("neonPlantEcology")
install.packages("neonPlantEcology")
install.packages("neonPlantEcology")
library(neonPlantEcology)
detach("package:neonPlantEcology", unload = TRUE)
library(devtools)
load_all()
build()
check()
install.packages("neonstore")
library(devtools)
load_all()
load_all()
load_all()
load_all()
vignette('neonPlantEcology')
?document
load_all()
document()
build()
check(cran = T, remote = T, vignettes = TRUE)
install(build_vignettes = TRUE)
install()
devtools::update_packages()
devtools::update_packages()
=======
d <- load("/Users/Adam.Mahood/projects/neon_plant_examples/d.rda")
lf <- npe_longform(d)
devtools::load_all()
lf <- npe_longform(d)
load("/Users/Adam.Mahood/projects/neon_plant_examples/d.rda")
lf <- npe_longform(d)
cm <- npe_community_matrix(d)
neon_div_object <- d
trace_cover=0.5
pc_na_value = 0.5
scale = "plot"
timescale = "annual"
neon_div_object <- npe_update_subplots(neon_div_object) |>
npe_eventID_fixer(verbose = verbose)
verbose = FALSE
neon_div_object <- npe_update_subplots(neon_div_object) |>
npe_eventID_fixer(verbose = verbose)
verbose = TRUE
npe_update_subplots(neon_div_object) |>
npe_eventID_fixer(verbose = verbose)
neon_div_object <- npe_update_subplots(neon_div_object) |>
npe_eventID_fixer(verbose = verbose)
neon_div_object$div_1m2Data <-
neon_div_object$div_1m2Data |>
tidyr::replace_na(list(percentCover = pc_na_value))
cover <- neon_div_object$div_1m2Data |>
dtplyr::lazy_dt() |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::mutate(eventID = stringr::str_replace_all(eventID, "JORN022", "JORN.1.2022")) |>
# dplyr::mutate(endDate = as.Date(endDate)) |>
dplyr::filter(divDataType == "plantSpecies") |>
tidyr::replace_na(list(percentCover=trace_cover)) |>
dplyr::filter(taxonID != "") |>
dplyr::group_by(plotID, taxonID, eventID) |>
dplyr::summarise(cover = sum(percentCover, na.rm=TRUE)/ifelse(as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) |>
dplyr::ungroup() |>
tibble::as_tibble()
traces <- neon_div_object$div_10m2Data100m2Data |>
dtplyr::lazy_dt() |>
dplyr::mutate(eventID = stringr::str_remove_all(eventID, "\\_\\d{3}")) |>
dplyr::mutate(eventID = stringr::str_replace_all(eventID, "JORN022", "JORN.1.2022")) |>
dplyr::mutate(endDate = as.Date(endDate)) |>
dplyr::filter(targetTaxaPresent == "Y") |>
dplyr::group_by(plotID, subplotID, taxonID, eventID) |>
dplyr::summarise(cover = trace_cover,
# endDate = first(endDate),
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) |>
dplyr::ungroup() |>
dplyr::filter(taxonID != "") |>
dplyr::group_by(plotID, taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/ifelse(as.numeric(stringr::str_sub(eventID,8,11))< 2019, 8,6),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
# endDate = first(endDate),
family = first(family)) |>
dplyr::ungroup() |>
tibble::as_tibble()
full_on_cover <- dplyr::bind_rows(cover, traces) |>
dplyr::group_by(plotID, taxonID, eventID, nativeStatusCode, scientificName, family) |>
dplyr::summarise(cover = sum(cover)) |>
dplyr::ungroup() |>
tidyr::replace_na(list(family = "Unknown")) |>
dplyr::mutate(site = stringr::str_sub(plotID, 1,4),
subplotID = "plot")
full_on_cover <- full_on_cover  |>
tidyr::separate(eventID, into = c("site_plot", "bout", "eventID"),
sep = "\\.",remove = F)
full_on_cover <- full_on_cover |>
dplyr::group_by(plotID, taxonID, nativeStatusCode, scientificName,
family, site, subplotID,eventID) |>
dplyr::summarise(cover = max(cover, na.rm=T)) |>
dplyr::ungroup()
full_on_cover |> summary()
full_on_cover |> filter(is.infinite(cover))
full_on_cover |> filter(cover <0)
full_on_cover |> filter(cover > 0)
full_on_cover |> dplyr::filter(cover > 0)
full_on_cover |> dplyr::filter(cover < 0)
d$div_1m2Data |> dplyr::filter(is.na(eventID))
d$div_1m2Data |> dplyr::filter(is.na(eventID)) |> dplyr::select(eventID, siteID, percentCover)
d$div_10m2Data100m2Data|> dplyr::filter(is.na(eventID)) |> dplyr::select(eventID, siteID, percentCover)
d$div_10m2Data100m2Data|> dplyr::filter(is.na(eventID)) |> dplyr::select(eventID, siteID)
d$div_1m2Data |> filter(siteID == "OSBS") |> pull(eventID)
d$div_1m2Data |> dplyr::filter(is.na(eventID)) |> dplyr::select(eventID, siteID, percentCover)
library(tidyverse)
d$div_1m2Data |> filter(siteID == "OSBS") |> pull(eventID)
d$div_1m2Data |> filter(siteID == "OSBS") |> pull(eventID) |>
d$div_1m2Data |> filter(siteID == "OSBS") |> pull(eventID) |> unique()
d$div_1m2Data |> filter(siteID == "OSBS") |> pull(eventID)
d$div_1m2Data |> filter(siteID == "OSBS") |> pull(eventID) |> unique()
dd <- d
names(dd$div_1m2Data)
dd$div_1m2Data$endDate
xx <- d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", str_sub(endDate,1,4))))
xx <- d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", str_sub(endDate,1,4))), eventID)
xx <- d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", str_sub(endDate,1,4)),
eventID))
dd$div_1m2Data <- xx
npe_community_matrix(dd)
dd <- d
xx <- d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", str_sub(endDate,1,4)),
eventID))
dd$div_1m2Data <- xx
npe_community_matrix(dd)
npe_eventID_fixer(dd)
npe_eventID_fixer(dd, verbose =T)
ee <- npe_eventID_fixer(dd, verbose =T)
ee$div_1m2Data |> filter(eventID ==NA)
ee$div_1m2Data |> filter(is.na(eventID))
d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", lubridate::year(endDate)),
eventID))
d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", lubridate::year(endDate)),
eventID)) |>
filter(is.na(eventID))
d$div_1m2Data |> filter(siteID == "BART") |> pull(eventID) |> unique()
d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", lubridate::year(endDate)),
eventID))|>
mutate(eventID == ifelse(siteID == "BART", str_c("BART.1.", lubridate::year(endDate)),
eventID)) |>
filter(is.na(eventID))
d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", lubridate::year(endDate)),
eventID))|>
mutate(eventID == ifelse(siteID == "BART", str_c("BART.1.", lubridate::year(endDate)),
eventID)) |>
filter(is.na(eventID)) |> dplyr::select(endDate, eventID, siteID)
d$div_1m2Data$endDate |> lubridate::year()
d$div_1m2Data |>
mutate(eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", lubridate::year(endDate)),
eventID))|>
mutate(eventID == ifelse(siteID == "BART", str_c("BART.1.", lubridate::year(endDate)),
eventID)) |>
filter(is.na(eventID)) |> dplyr::select(endDate, eventID, siteID)
d$div_1m2Data |>
mutate(year = lubridate::year(endDate),
eventID == ifelse(siteID == "OSBS", str_c("OSBS.1.", year),
eventID))|>
mutate(eventID == ifelse(siteID == "BART", str_c("BART.1.", year),
eventID)) |>
filter(is.na(eventID)) |> dplyr::select(endDate, eventID, siteID)
d$div_1m2Data |>
mutate(year = lubridate::year(endDate),
eventID == ifelse(siteID == "OSBS", stringr::str_c("OSBS.1.", year),
eventID))|>
mutate(eventID == ifelse(siteID == "BART", stringr::str_c("BART.1.", year),
eventID)) |>
filter(is.na(eventID)) |> dplyr::select(endDate, eventID, siteID)
nas <- d$div_1m2Data |>
filter(is.na(eventID))
nas
nas |> mutate(year = lubridate::year(endDate),
eventID == ifelse(siteID == "OSBS", stringr::str_c("OSBS.1.", year),
eventID))|>
mutate(eventID == ifelse(siteID == "BART", stringr::str_c("BART.1.", year),
eventID)) |>
filter(is.na(eventID)) |> dplyr::select(endDate, eventID, siteID)
nas |> mutate(year = lubridate::year(endDate)
)
nas |> mutate(year = lubridate::year(endDate),
eventID == ifelse(siteID == "OSBS", stringr::str_c("OSBS.1.", year),
eventID))
nas |> mutate(year = lubridate::year(endDate),
eventID = ifelse(siteID == "OSBS", stringr::str_c("OSBS.1.", year),
eventID))|>
mutate(eventID = ifelse(siteID == "BART", stringr::str_c("BART.1.", year),
eventID)) |>
filter(is.na(eventID)) |> dplyr::select(endDate, eventID, siteID)
d$div_1m2Data |> filter(siteID == "SCBI") |> pull(eventID) |> unique()
nas |> mutate(year = lubridate::year(endDate),
eventID = ifelse(siteID %in% c("SCBI", "BART", "OSBS"), stringr::str_c(siteID, ".1.", year),
eventID))|>
filter(is.na(eventID)) |> dplyr::select(endDate, eventID, siteID)
xx <- d$div_1m2Data |>
mutate(year = lubridate::year(endDate),
eventID = ifelse(siteID %in% c("SCBI", "BART", "OSBS"), stringr::str_c(siteID, ".1.", year),
eventID))
dd$div_1m2Data <- xx
npe_community_matrix(dd)
d$div_1m2Data |> pull(eventID) |> unique()
d$div_1m2Data |> pull(eventID) |> tidyr::separate()
d$div_1m2Data |> dplyr::select(eventID) |> tidyr::separate(eventID)
d$div_1m2Data |> dplyr::select(eventID) |> tidyr::separate(eventID, into = c("site", "bout", "year"))
eids <- d$div_1m2Data |> dplyr::select(eventID) |> dplyr::filter(!is.na(eventID)) |> tidyr::separate(eventID, into = c("site", "bout", "year"))
eids <- d$div_1m2Data |> dplyr::select(eventID) |> dplyr::filter(!is.na(eventID)) |> tidyr::separate(eventID, into = c("site", "bout", "year")) |> unique()
eids
eids <- d$div_1m2Data |> dplyr::select(eventID) |> dplyr::filter(!is.na(eventID)) |> tidyr::separate(eventID, by = ".", into = c("site", "bout", "year")) |> unique()
eids <- d$div_1m2Data |> dplyr::select(eventID) |> dplyr::filter(!is.na(eventID)) |> tidyr::separate(eventID, by = "\\.", into = c("site", "bout", "year")) |> unique()
eids <- d$div_1m2Data |> dplyr::select(eventID) |> dplyr::filter(!is.na(eventID)) |> tidyr::separate(eventID, sep = ".", into = c("site", "bout", "year")) |> unique()
eids
eids <- d$div_1m2Data |> dplyr::select(eventID)|> unique() |> dplyr::filter(!is.na(eventID)) |> tidyr::separate(eventID, sep = "\\.", into = c("site", "bout", "year"))
eids
eids <- d$div_1m2Data |> dplyr::select(eventID)|> unique() |>
dplyr::filter(!is.na(eventID)) |>
tidyr::separate(eventID, sep = "\\.", into = c("site", "bout", "year")) |>
mutate(site = str_sub(site, 1, 4)) |>
group_by(site) |>
summarise(bouts = length(unique(bout))) |>
ungroup()
eids
eids <- d$div_1m2Data |> dplyr::select(eventID)|> unique() |>
dplyr::filter(!is.na(eventID)) |>
tidyr::separate(eventID, sep = "\\.", into = c("site", "bout", "year")) |>
mutate(site = str_sub(site, 1, 4)) |>
group_by(site) |>
summarise(bouts = length(unique(bout))) |>
ungroup() |>
filter(bouts ==1)
eids
paste(eids$bouts)
paste(eids$site, collapse = "', '")
x<- d
x$div_1m2Data |>
dplyr::filter(!is.na(eventID)) |>
dplyr::pull(eventID) |>
unique() |>
stringr::str_split_i("\\.", 2) |>
unique()
bouts <- x$div_1m2Data |> dplyr::select(eventID)|> unique() |>
dplyr::filter(!is.na(eventID)) |>
tidyr::separate(eventID, sep = "\\.", into = c("site", "bout", "year")) |>
mutate(site = str_sub(site, 1, 4)) |>
group_by(site) |>
summarise(bouts = length(unique(bout))) |>
ungroup()
bouts
oneboutsites <- bouts |> dplyr::filter(bouts == 1) |> pull(bouts)
oneboutsites <- bouts |> dplyr::filter(bouts == 2) |> pull(bouts)
oneboutsites <- bouts |> dplyr::filter(bouts == 1) |> pull(bouts)
twoboutsites <- bouts |> dplyr::filter(bouts == 2) |> pull(bouts)
oneboutsites
oneboutsites <- bouts |> dplyr::filter(bouts == 1) |> pull(site)
twoboutsites <- bouts |> dplyr::filter(bouts == 2) |> pull(site)
oneboutsites
twoboutsites
load_all()
library(devtools)
load_all()
npe_eventID_fixer2(d) -> ddd
npe_longform(ddd)
npe_community_matrix(ddd)
npe_longform(ddd) -> lf
lf |> filter(site == "JORN")
ddd$div_1m2Data$eventID
ddd$div_1m2Data$eventID |> unique()
ddd$div_1m2Data$eventID |> unique() |> sort()
d$div_1m2Data$eventID |> unique() |> sort()
load_all()
npe_community_matrix(d)
load_all()
check()
load_all()
document()
check()
check()
load_all()
document()
check()
install()
library(devtools)
load_all();document();install()
library(devtools)
load_all()
check()
devtools::submit_cran()
>>>>>>> Stashed changes
library(devtools)
load_all()
load_all()
load_all()
document()
document()
install.packages("xfun")
document()
install()
install(build_vignettes = TRUE)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools", lib = .libPaths()[2])
install.packages("htmltools", lib = .libPaths()[2])
.libPaths()
install.packages("htmltools", lib = .libPaths()[1])
install.packages("htmltools", lib = .libPaths()[1])
detach('htmltools')
detach(name = 'htmltools')
detach("package:graphics", unload = TRUE)
detach(name = 'package:htmltools')
detach('package:htmltools', unload=T)
install.packages("htmltools", lib = .libPaths()[1])
install.packages("htmltools", lib = .libPaths()[1])
load_all()
library(devtools)
load_all()
document()
install(build_vignettes = TRUE)
check()
check(cran=T, remote=T, document = T)
devtools::update_packages()
install.packages('data.table')
install.packages("data.table")
install.packages("data.table", lib = .libPaths()[1])
install.packages("promises", lib = .libPaths()[1])
install.packages("httpuv", lib = .libPaths()[1])
install.packages("digest", lib = .libPaths()[1])
devtools::update_packages()
update.packages()
update.packages(lib.loc = .libPaths()[1])
update.packages(lib.loc = .libPaths()[1], ask=F)
install.packages('boot')
update.packages()
update.packages('boot')
update.packages('cluster')
update.packages()
library(devtools)
load_all()
citation("neonPlantEcology")
citation("microclima")
citation("microclimf")
citation("mcera5")
citation('vegan')
citation('tidyverse')
