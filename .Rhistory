betadiversity = FALSE,
families = NA) {
requireNamespace("tidyr")
requireNamespace("dplyr")
requireNamespace('vegan')
requireNamespace("stringr")
# Data wrangling =============================================================
full_on_cover <- npe_longform(neon_div_object,
scale = scale,
trace_cover = trace_cover,
timescale = timescale)
template <- full_on_cover |>
dplyr::select(site, plotID, subplotID, eventID)
# Betadiversity ===================
if(betadiversity == TRUE & scale == "plot"){
ten_m <- npe_longform(neon_div_object,
scale = "10m",
timescale = timescale) |>
dplyr::group_by(site, plotID, subplotID,taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
tidyr::spread(taxonID, cover, fill=0) |>
dplyr::ungroup() |>
dplyr::select(-subplotID)
bd<- data.frame(turnover = NA, nestedness = NA, eventID = NA, plotID = NA, site = NA, subplotID = NA)
counter <- 1
for(i in unique(ten_m$eventID)){
for(j in unique(ten_m$plotID)){
if(nrow(ten_m |>
dplyr::filter(eventID == i, plotID == j))>0){
out <- ten_m |>
dplyr::filter(eventID == i, plotID == j) |>
dplyr::select(-eventID, -site, -plotID) |>
vegan::nestedbetajac()
bd[counter, 1] <- out[1] |> unname()
bd[counter, 2] <- out[2] |> unname()
bd[counter, 3] <- i
bd[counter, 4] <- j
bd[counter, 5] <- stringr::str_sub(j, 1,4)
bd[counter, 6] <- "plot"
counter <- counter+1}
}
}
}
if(betadiversity == TRUE & scale == "site"){
plot_scale <- npe_longform(neon_div_object,
scale = "plot",
timescale = timescale) |>
dplyr::group_by(site, plotID,taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, eventID) |>
tidyr::spread(taxonID, cover, fill=0) |>
dplyr::ungroup() |>
dplyr::select(-plotID)
bd<- data.frame(turnover = NA, nestedness = NA, eventID = NA, site = NA, plotID = NA, subplotID = NA)
counter <- 1
for(i in unique(plot_scale$eventID)){
for(j in unique(plot_scale$site)){
if(nrow(plot_scale |>
dplyr::filter(eventID == i, site == j))>0){
out <- plot_scale |>
dplyr::filter(eventID == i, site == j) |>
dplyr::select(-eventID, -site) |>
vegan::nestedbetajac()
bd[counter, 1] <- out[1] |> unname()
bd[counter, 2] <- out[2] |> unname()
bd[counter, 3] <- i
bd[counter, 4] <- j
bd[counter, 5] <- "site"
bd[counter, 6] <- "site"
counter <- counter+1}
}
}
}
# Native vs Invasive cover ===================================================
n_i <- full_on_cover |>
dplyr::filter(nativeStatusCode %in% c("I", "N", "UNK")) |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
dplyr::mutate(total_cover = sum(cover)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID,eventID, nativeStatusCode) |>
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) |>
dplyr::ungroup() |>
dplyr::mutate(rel_cover = cover/total_cover) |>
dplyr::ungroup()
lut_nsc <-c("cover_native", "cover_exotic", "cover_unknown")
names(lut_nsc) <-  c("N", "I", "UNK")
n_i_cover <- n_i |>
dplyr::select(site, plotID, subplotID,eventID, nativeStatusCode, cover) |>
dplyr::mutate(nativeStatusCode = lut_nsc[nativeStatusCode]) |>
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = cover,
values_fill = list(cover = 0))
n_i_rel_cover <- n_i |>
dplyr::select(site, plotID, subplotID,eventID, nativeStatusCode, rel_cover) |>
dplyr::mutate(nativeStatusCode = lut_nsc[nativeStatusCode] |> stringr::str_c("rel_", ...= _)) |>
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = rel_cover,
values_fill = list(rel_cover = 0)) |>
dplyr::left_join(n_i_cover, by = c("site", "plotID", "subplotID","eventID"))
if(sum(names(n_i_rel_cover) %in% "cover_exotic")==0){
n_i_rel_cover <- n_i_rel_cover |>
dplyr::mutate(cover_exotic = 0,
rel_cover_exotic = 0)
}
# not exotic cover ===================================================
n_e <- full_on_cover |>
dplyr::mutate(nativeStatusCode = ifelse(nativeStatusCode !="I", "NE", "I")) |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
dplyr::mutate(total_cover = sum(cover)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID,eventID, nativeStatusCode) |>
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) |>
dplyr::ungroup() |>
dplyr::mutate(rel_cover = cover/total_cover) |>
dplyr::ungroup()
lut_ne <-c("cover_notexotic", "cover_exotic")
names(lut_ne) <-  c("NE", "I")
n_e_cover <- n_e |>
dplyr::select(site, plotID, subplotID,eventID, nativeStatusCode, cover) |>
dplyr::mutate(nativeStatusCode = lut_ne[nativeStatusCode]) |>
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = cover,
values_fill = list(cover = 0)) |>
dplyr::select(-contains("cover_exotic"))
n_e_rel_cover <- n_e |>
dplyr::select(site, plotID, subplotID,eventID, nativeStatusCode, rel_cover) |>
dplyr::mutate(nativeStatusCode = lut_ne[nativeStatusCode] |> stringr::str_c("rel_", ...= _)) |>
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = rel_cover,
values_fill = list(rel_cover = 0)) |>
dplyr::select(-contains("rel_cover_exotic")) |>
dplyr::left_join(n_e_cover, by = c("site", "plotID", "subplotID","eventID"))
# Cover by family ============================================================
if(!is.na(families)){
byfam <- full_on_cover |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
dplyr::mutate(total_cover = sum(cover)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID,eventID, family) |>
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) |>
dplyr::ungroup() |>
dplyr::mutate(rel_cover = cover/total_cover) |>
dplyr::ungroup() |>
dplyr::filter(family %in% families)
rcf<- byfam |>
dplyr::select(site, plotID, subplotID,eventID, family, rel_cover) |>
tidyr::pivot_wider(names_from = family,
names_prefix = "rel_cover_",
values_from = (rel_cover),
values_fill = list(rel_cover = 0))
cf<- byfam |>
dplyr::select(site, plotID, subplotID,eventID, family, cover) |>
tidyr::pivot_wider(names_from = family,
names_prefix = "cover_",
values_from = (cover),
values_fill = list(cover = 0))
nspp_byfam <- full_on_cover |>
dplyr::filter(nativeStatusCode %in% c("I", "N", "UNK")) |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
dplyr::mutate(total_cover = sum(cover)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID,eventID, family, nativeStatusCode) |>
dplyr::summarise(nspp = length(unique(scientificName))) |>
dplyr::ungroup() |>
dplyr::filter(family %in% families) |>
tidyr::pivot_wider(names_from = c(family, nativeStatusCode),
names_prefix = "nspp_",
values_from = (nspp),
values_fill = list(nspp = 0))
}
# by family, divided by biogeographic origin =================================
if(!is.na(families)){
family_stuff <- full_on_cover |>
dplyr::filter(nativeStatusCode %in% c("I", "N", "UNK")) |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
dplyr::mutate(total_cover = sum(cover)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID,eventID, family, nativeStatusCode) |>
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) |>
dplyr::ungroup() |>
dplyr::mutate(rel_cover = cover/total_cover) |>
dplyr::ungroup() |>
dplyr::filter(family %in% families)
rc_ig<- family_stuff |>
dplyr::select(site, plotID, subplotID,eventID, family, nativeStatusCode,rel_cover) |>
dplyr::filter(nativeStatusCode == "I") |>
tidyr::pivot_wider(names_from = family,
names_prefix = "rc_exotic_",
values_from = (rel_cover),
values_fill = list(rel_cover = 0)) |>
dplyr::select(-nativeStatusCode)
rc_neg<- family_stuff |>
dplyr::select(site, plotID, subplotID,eventID, family, nativeStatusCode,rel_cover) |>
dplyr::filter(nativeStatusCode != "I") |>
tidyr::pivot_wider(names_from = family,
names_prefix = "rc_notexotic_",
values_from = (rel_cover),
values_fill = list(rel_cover = 0)) |>
dplyr::select(-nativeStatusCode)
rc_ng<- family_stuff |>
dplyr::select(site, plotID, subplotID,eventID, family, nativeStatusCode,rel_cover) |>
dplyr::filter(nativeStatusCode == "N") |>
tidyr::pivot_wider(names_from = family,
names_prefix = "rc_native_",
values_from = (rel_cover),
values_fill = list(rel_cover = 0)) |>
dplyr::select(-nativeStatusCode)
c_ig<- family_stuff |>
dplyr::select(site, plotID, subplotID,eventID, family, nativeStatusCode,cover) |>
dplyr::filter(nativeStatusCode == "I") |>
tidyr::pivot_wider(names_from = family,
names_prefix = "cover_exotic_",
values_from = (cover),
values_fill = list(cover = 0)) |>
dplyr::select(-nativeStatusCode)
c_neg<- family_stuff |>
dplyr::select(site, plotID, subplotID,eventID, family, nativeStatusCode,cover) |>
dplyr::filter(nativeStatusCode != "I") |>
tidyr::pivot_wider(names_from = family,
names_prefix = "cover_notexotic_",
values_from = (cover),
values_fill = list(cover = 0)) |>
dplyr::select(-nativeStatusCode)
c_ng<- family_stuff |>
dplyr::select(site, plotID, subplotID,eventID, family, nativeStatusCode,cover) |>
dplyr::filter(nativeStatusCode == "N") |>
tidyr::pivot_wider(names_from = family,
names_prefix = "cover_native_",
values_from = (cover),
values_fill = list(cover = 0)) |>
dplyr::select(-nativeStatusCode)
}
# exotic  diversity and evenness ===============
if(nrow(dplyr::filter(full_on_cover,nativeStatusCode=="I"))>0){
vegan_friendly_div_ex <- full_on_cover |>
dplyr::filter(nativeStatusCode %in% c("I")) |>
dplyr::group_by(site, plotID, subplotID,taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
tidyr::spread(taxonID, cover, fill=0) |>
dplyr::ungroup()
nspp_ex <- vegan_friendly_div_ex |>
dplyr::select(site, plotID, subplotID,eventID) |>
dplyr::mutate(shannon_exotic = vegan::diversity(vegan_friendly_div_ex |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)),
evenness_exotic = shannon_exotic/vegan::specnumber(vegan_friendly_div_ex |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
nspp_exotic = vegan::specnumber(vegan_friendly_div_ex |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)))}else{
nspp_ex<-
template |>
dplyr::mutate(shannon_exotic = 0,
evenness_exotic = 0,
nspp_exotic = 0)
}
# native diversity and evenness ===========
vegan_friendly_div_n<- full_on_cover |>
dplyr::filter(nativeStatusCode %in% c("N")) |>
dplyr::group_by(site, plotID, subplotID,taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
tidyr::spread(taxonID, cover, fill=0) |>
dplyr::ungroup()
nspp_n <- vegan_friendly_div_n |>
dplyr::select(site, plotID, subplotID,eventID) |>
dplyr::mutate(shannon_native = vegan::diversity(vegan_friendly_div_n |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)),
evenness_native = shannon_native/vegan::specnumber(vegan_friendly_div_n |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
nspp_native = vegan::specnumber(vegan_friendly_div_n |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)))
# unknown diversity and evenness  ========================
vegan_friendly_div_un<- full_on_cover |>
dplyr::filter(nativeStatusCode %in% c("UNK")) |>
dplyr::group_by(site, plotID, subplotID,taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
tidyr::spread(taxonID, cover, fill=0) |>
dplyr::ungroup()
nspp_un <- vegan_friendly_div_un |>
dplyr::select(site, plotID, subplotID,eventID) |>
dplyr::mutate(shannon_unknown = vegan::diversity(vegan_friendly_div_un |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)),
evenness_unknown = shannon_unknown/vegan::specnumber(vegan_friendly_div_un |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
nspp_unknown = vegan::specnumber(vegan_friendly_div_un |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)))
# not exotic diversity and evenness  ====================
vegan_friendly_div_nex <- full_on_cover |>
dplyr::filter(nativeStatusCode != c("I")) |>
dplyr::group_by(site, plotID, subplotID,taxonID, eventID) |>
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) |>
dplyr::group_by(site, plotID, subplotID, eventID) |>
tidyr::spread(taxonID, cover, fill=0) |>
dplyr::ungroup()
nspp_nex <- vegan_friendly_div_nex |>
dplyr::select(site, plotID, subplotID,eventID) |>
dplyr::mutate(shannon_notexotic = vegan::diversity(vegan_friendly_div_nex |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)),
evenness_notexotic = shannon_notexotic/vegan::specnumber(vegan_friendly_div_nex |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
nspp_notexotic = vegan::specnumber(vegan_friendly_div_nex |>
dplyr::select(-site,
-plotID,
-subplotID,
-eventID)))
# total vegan::diversity - not splitting between native status =========
vegan_friendly_div_total <- full_on_cover |>
dplyr::group_by(site, plotID, subplotID, taxonID, eventID) |>
dplyr::summarise(cover = sum(cover)) |>
dplyr::ungroup() |>
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) |>
dplyr::filter(nchar(as.character(taxonID))>0) |>
dplyr::group_by(site, plotID, subplotID,eventID) |>
tidyr::spread(taxonID, cover, fill=0) |>
dplyr::ungroup()
div_total <- dplyr::select(vegan_friendly_div_total, site, plotID, subplotID,eventID) |>
dplyr::mutate(shannon_total = vegan::diversity(vegan_friendly_div_total |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
evenness_total = shannon_total/vegan::specnumber(vegan_friendly_div_total |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
nspp_total = vegan::specnumber(vegan_friendly_div_total |>
dplyr::select(-site, -plotID, -subplotID, -eventID)))
# family diversity ===========================================================
vegan_friendly_div_total_f <- full_on_cover |>
dplyr::filter(!is.na(family)) |>
dplyr::group_by(site, plotID, subplotID, family, eventID) |>
dplyr::summarise(cover = sum(cover)) |>
dplyr::ungroup() |>
dplyr::group_by(site, plotID, subplotID,eventID) |>
tidyr::spread(family, cover, fill=0) |>
dplyr::ungroup()
div_total_f <- dplyr::select(vegan_friendly_div_total_f, site, plotID, subplotID,eventID) |>
dplyr::mutate(shannon_family = vegan::diversity(vegan_friendly_div_total_f |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
evenness_family = shannon_family/vegan::specnumber(vegan_friendly_div_total_f |>
dplyr::select(-site, -plotID, -subplotID, -eventID)),
nfamilies = vegan::specnumber(vegan_friendly_div_total_f |>
dplyr::select(-site, -plotID, -subplotID, -eventID)))
# joining and writing out ------------------------------------------------------
final_table <- template |>
dplyr::left_join(nspp_ex, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(nspp_nex, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(nspp_n, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(nspp_un, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(n_i_rel_cover, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(n_e_rel_cover, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(div_total, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(div_total_f, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::mutate(scale = scale,
invaded = ifelse(cover_exotic > 0, "invaded", "not_invaded"))
if(exists("bd")){
final_table <- final_table |>
dplyr::left_join(bd, by = c("site", "plotID", "subplotID", "eventID"))
}
if(!is.na(families)){
final_table <- final_table |>
dplyr::left_join(rcf, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(rc_ig, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(c_ig, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(cf, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(rc_ng, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(c_ng, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(rc_neg, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(c_neg, by = c("site", "plotID", "subplotID", "eventID")) |>
dplyr::left_join(nspp_byfam, by = c("site", "plotID", "subplotID", "eventID"))}
# seems crazy, i know... but those NAs should all definitely be zero
final_table <- final_table |>
dplyr::mutate_all(list(~ replace(., is.na(.), 0))) |>
unique() # temporary fix, for some reason it's returning repeats of each row - there's mutate somewhere where there needs to be a summarise maybe
return(final_table)
}
D14 |> npe_diversity_info()
document()
rm(list = c("npe_diversity_info"))
document()
check()
install()
library(devtools)
use_release_issue()
use_cran_comments()
use_github_links()
git_credentials()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
load_all()
devtools::check(remote = TRUE, manual = TRUE)
data("D14")
npe_longform("D14") |> npe_name_cleaner()
npe_longform(D14)
npe_longform(D14) |> npe_name_cleaner()
load_all()
npe_longform(D14) |> npe_name_cleaner()
load_all()
npe_longform(D14) |> npe_name_cleaner()
npe_longform(D14) |> npe_name_cleaner() |> dplyr::pull(scientificName) %>% unique()
npe_longform(D14) |> npe_name_cleaner() |> dplyr::pull(scientificName) |> unique()
devtools::check(remote = TRUE, manual = TRUE)
> d14_sites <- npe_site_ids(domain = "D14")
d14_sites <- npe_site_ids(domain = "D14")
d14_sites
npe_site_ids
load_all()
d14_sites <- npe_site_ids(domain = "D14")
devtools::check(remote = TRUE, manual = TRUE)
document()
build()
document()
build()
install()
library(devtools)
load_all()
document()
check()
load_all()
npe_site_ids
npe_site_ids()
load_all()
document()
check()
resave_data
data("sites")
sites
data("D14")
dim(D14)
length(D14)
names(D14)
data("plot_centroids")
plot_centroids
document()
load_all()
document()
load_all()
document()
check()
check()
load_all()
document()
check()
load_all()
document()
load_all()
document()
check()
load_all()
document()
check()
load_all()
document()
data("sites")
sites
save(sites, file = "data/sites.rda", compress = "xz")
data("D14")
save(D14, file = "data/sites.rda", compress = "bzip2")
sites
save(sites, file = "data/sites.rda", compress = "xz")
save(D14, file = "data/D14.rda", compress = "bzip2")
data("plot_centroids")
save(plot_centroids, file = "data/plot_centroids.rda", compress = "xz")
document()
check()
urlchecker::url_check()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
usethis::use_version('patch')
usethis::use_version('patch')
usethis::use_version('patch')
devtools::submit_cran()
version()
version
