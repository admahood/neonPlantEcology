-year)))
# native diversity and evenness ===========
vegan_friendly_div_n<- full_on_cover %>%
dplyr::filter(nativeStatusCode %in% c("N")) %>%
dplyr::group_by(site, plotID, subplotID,taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) %>%
dplyr::group_by(site, plotID, subplotID, year) %>%
tidyr::spread(taxonID, cover, fill=0) %>%
dplyr::ungroup()
nspp_n <- vegan_friendly_div_n %>%
dplyr::select(site, plotID, subplotID,year) %>%
mutate(shannon_native = vegan::diversity(vegan_friendly_div_n %>%
dplyr::select(-site,
-plotID,
-subplotID,
-year)),
evenness_native = shannon_native/vegan::specnumber(vegan_friendly_div_n%>%
dplyr::select(-site, -plotID, -subplotID, -year)),
nspp_native = vegan::specnumber(vegan_friendly_div_n %>%
dplyr::select(-site,
-plotID,
-subplotID,
-year)))
# unknown diversity and evenness  ========================
vegan_friendly_div_un<- full_on_cover %>%
dplyr::filter(nativeStatusCode %in% c("UNK")) %>%
dplyr::group_by(site, plotID, subplotID,taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) %>%
dplyr::group_by(site, plotID, subplotID, year) %>%
tidyr::spread(taxonID, cover, fill=0) %>%
dplyr::ungroup()
nspp_un <- vegan_friendly_div_un %>%
dplyr::select(site, plotID, subplotID,year) %>%
mutate(shannon_unknown = vegan::diversity(vegan_friendly_div_un %>%
dplyr::select(-site,
-plotID,
-subplotID,
-year)),
evenness_unknown = shannon_unknown/vegan::specnumber(vegan_friendly_div_un%>%
dplyr::select(-site, -plotID, -subplotID, -year)),
nspp_unknown = vegan::specnumber(vegan_friendly_div_un %>%
dplyr::select(-site,
-plotID,
-subplotID,
-year)))
# not exotic diversity and evenness  ====================
vegan_friendly_div_nex <- full_on_cover %>%
dplyr::filter(nativeStatusCode != c("I")) %>%
dplyr::group_by(site, plotID, subplotID,taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) %>%
dplyr::group_by(site, plotID, subplotID, year) %>%
tidyr::spread(taxonID, cover, fill=0) %>%
dplyr::ungroup()
nspp_un <- vegan_friendly_div_nex %>%
dplyr::select(site, plotID, subplotID,year) %>%
mutate(shannon_notexotic = vegan::diversity(vegan_friendly_div_nex %>%
dplyr::select(-site,
-plotID,
-subplotID,
-year)),
evenness_notexotic = shannon_unknown/vegan::specnumber(vegan_friendly_div_nex%>%
dplyr::select(-site, -plotID, -subplotID, -year)),
nspp_notexotic = vegan::specnumber(vegan_friendly_div_nex %>%
dplyr::select(-site,
-plotID,
-subplotID,
-year)))
# total vegan::diversity - not splitting between native status =========
vegan_friendly_div_total <- full_on_cover %>%
dplyr::group_by(site, plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(taxonID = as.character(taxonID),
plotID = as.character(plotID)) %>%
dplyr::filter(nchar(as.character(taxonID))>0) %>%
dplyr::group_by(site, plotID, subplotID,year) %>%
tidyr::spread(taxonID, cover, fill=0) %>%
dplyr::ungroup()
div_total <- dplyr::select(vegan_friendly_div_total, site, plotID, subplotID,year) %>%
mutate(shannon_total = vegan::diversity(vegan_friendly_div_total%>%
dplyr::select(-site, -plotID, -subplotID, -year)),
evenness_total = shannon_total/vegan::specnumber(vegan_friendly_div_total%>%
dplyr::select(-site, -plotID, -subplotID, -year)),
nspp_total = vegan::specnumber(vegan_friendly_div_total%>%
dplyr::select(-site, -plotID, -subplotID, -year)))
# family diversity ===========================================================
vegan_friendly_div_total_f <- full_on_cover %>%
dplyr::filter(!is.na(family)) %>%
dplyr::group_by(site, plotID, subplotID, family, year) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID,year) %>%
tidyr::spread(family, cover, fill=0) %>%
dplyr::ungroup()
div_total_f <- dplyr::select(vegan_friendly_div_total_f, site, plotID, subplotID,year) %>%
mutate(shannon_family = vegan::diversity(vegan_friendly_div_total_f%>%
dplyr::select(-site, -plotID, -subplotID, -year)),
evenness_family = shannon_family/vegan::specnumber(vegan_friendly_div_total_f%>%
dplyr::select(-site, -plotID, -subplotID, -year)),
nfamilies = vegan::specnumber(vegan_friendly_div_total_f%>%
dplyr::select(-site, -plotID, -subplotID, -year)))
# joining and writing out ------------------------------------------------------
final_table <- template %>%
dplyr::left_join(nspp_ex, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(nspp_nex, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(nspp_n, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(nspp_un, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(n_i_cover, by = c("site", "plotID", "subplotID","year")) %>%
dplyr::left_join(n_i_rel_cover, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(n_e_rel_cover, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(div_total, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(div_total_f, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::mutate(scale = scale,
invaded = if_else(cover_exotic > 0, "invaded", "not_invaded"))#%>%
#dplyr::mutate(scale = factor(scale, levels = c("1m","10m","100m", "plot", "site")))
if(exists("bd")){
final_table <- final_table %>%
left_join(bd, by = c("site", "plotID", "subplotID", "year"))
}
if(!is.na(families)){
final_table <- final_table %>%
dplyr::left_join(rcf, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(rc_ig, by = c("site", "plotID", "subplotID", "year"))%>%
dplyr::left_join(c_ig, by = c("site", "plotID", "subplotID", "year"))%>%
dplyr::left_join(cf, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(rc_ng, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(c_ng, by = c("site", "plotID", "subplotID", "year"))%>%
dplyr::left_join(rc_neg, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(c_neg, by = c("site", "plotID", "subplotID", "year"))%>%
dplyr::left_join(nspp_byfam, by = c("site", "plotID", "subplotID", "year"))}
if(!is.na(spp)){
final_table <- final_table %>%
dplyr::left_join(rc_sp, by = c("site", "plotID", "subplotID", "year")) %>%
dplyr::left_join(c_sp, by = c("site", "plotID", "subplotID", "year"))}
# seems crazy, i know... but those NAs should all definitely be zero
final_table <- final_table %>%
mutate_all(funs(replace(., is.na(.), 0))) %>%
unique() # temporary fix, for some reason it's returning repeats of each row - there's mutate somewhere where there needs to be a summarise maybe
return(final_table)
}
get_diversity_info(x)
full_on_cover <- get_longform_cover(x, scale = "plot")
# not exotic cover ===================================================
n_e <- full_on_cover %>%
dplyr::mutate(nativeStatusCode = ifelse(nativeStatusCode !="I", "NE", "I")) %>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID,year, nativeStatusCode) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup()
n_e
n_e_cover <- n_e %>%
dplyr::select(site, plotID, subplotID,year, nativeStatusCode, cover) %>%
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = cover,
values_fill = list(cover = 0)) %>%
dplyr::rename(cover_notexotic = NE,
cover_exotic = I) %>%
dplyr::select(-cover_exotic)
n_e_cover
n_e_rel_cover <- n_e %>%
dplyr::select(site, plotID, subplotID,year, nativeStatusCode, rel_cover) %>%
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = rel_cover,
values_fill = list(rel_cover = 0))%>%
dplyr::rename(rel_cover_notexotic = NE,
rel_cover_exotic = I) %>%
dplyr::select(-rel_cover_exotic) %>%
left_join(ne_cover, by = c("site", "plotID", "subplotID","year"))
n_e_rel_cover <- n_e %>%
dplyr::select(site, plotID, subplotID,year, nativeStatusCode, rel_cover) %>%
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = rel_cover,
values_fill = list(rel_cover = 0))%>%
dplyr::rename(rel_cover_notexotic = NE,
rel_cover_exotic = I) %>%
dplyr::select(-rel_cover_exotic) %>%
left_join(n_e_cover, by = c("site", "plotID", "subplotID","year"))
n_e_rel_cover
n_i <- full_on_cover %>%
dplyr::filter(nativeStatusCode %in% c("I", "N", "UNK")) %>%
dplyr::group_by(site, plotID, subplotID, year) %>%
dplyr::mutate(total_cover = sum(cover))%>%
dplyr::ungroup() %>%
dplyr::group_by(site, plotID, subplotID,year, nativeStatusCode) %>%
dplyr::summarise(cover = sum(cover),
total_cover = first(total_cover)) %>%
dplyr::ungroup() %>%
dplyr::mutate(rel_cover = cover/total_cover) %>%
dplyr::ungroup()
n_i_cover <- n_i %>%
dplyr::select(site, plotID, subplotID,year, nativeStatusCode, cover) %>%
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = cover,
values_fill = list(cover = 0)) %>%
dplyr::rename(cover_native = N,
cover_exotic = I,
cover_unk = UNK)
n_i_rel_cover <- n_i %>%
dplyr::select(site, plotID, subplotID,year, nativeStatusCode, rel_cover) %>%
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = rel_cover,
values_fill = list(rel_cover = 0))%>%
dplyr::rename(rel_cover_native = N,
rel_cover_exotic = I,
rel_cover_unk = UNK)
n_i_rel_cover
n_i_rel_cover <- n_i %>%
dplyr::select(site, plotID, subplotID,year, nativeStatusCode, rel_cover) %>%
tidyr::pivot_wider(names_from = nativeStatusCode,
values_from = rel_cover,
values_fill = list(rel_cover = 0))%>%
dplyr::rename(rel_cover_native = N,
rel_cover_exotic = I,
rel_cover_unk = UNK)%>%
left_join(n_i_cover, by = c("site", "plotID", "subplotID","year"))
n_i_rel_cover
devtools::document()
devtools::document()
devtools::install()
library(neondiveRsity)
neon_div_object <- download_plant_div("MOAB")
trace_cover=0.5
scale = "plot"
dissolve_years <- TRUE
cover <- neon_div_object$div_1m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
replace_na(list(percentCover=trace_cover)) %>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the max cover
# per sampling effort
dplyr::summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()  %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/8,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()
require(tidyverse)
cover <- neon_div_object$div_1m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
replace_na(list(percentCover=trace_cover)) %>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the max cover
# per sampling effort
dplyr::summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()  %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/8,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()
cover
traces <- neon_div_object$div_10m2Data100m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/12,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()
full_on_cover <- bind_rows(cover, traces) %>%
dplyr::group_by(plotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = str_sub(plotID, 1,4),
subplotID = "plot")
full_on_cover
cover <- neon_div_object$div_1m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
replace_na(list(percentCover=trace_cover)) %>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the max cover
# per sampling effort
dplyr::summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()  %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/8,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()
traces <- neon_div_object$div_10m2Data100m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/12,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()
n_plots <- length(unique(cover$plotID))
full_on_cover <- bind_rows(cover, traces) %>%
dplyr::group_by(plotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = str_sub(plotID, 1,4)) %>%
dplyr::group_by(site, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)/n_plots) %>%
dplyr::mutate(subplotID = "site",
plotID = "site") %>%
dplyr::ungroup()
full_on_cover
full_on_cover %>%
group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
summarise(cover = sum(cover, na.rm=T)/n_years)
n_years <- length(unique(full_on_cover$year))
full_on_cover %>%
group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
summarise(cover = sum(cover, na.rm=T)/n_years)
cover <- neon_div_object$div_1m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
replace_na(list(percentCover=trace_cover)) %>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the max cover
# per sampling effort
dplyr::summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()  %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/8,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()
traces <- neon_div_object$div_10m2Data100m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::filter(taxonID != "") %>%
dplyr::group_by(plotID, taxonID, year) %>%
dplyr::summarise(cover = sum(cover, na.rm=TRUE)/12,
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()
full_on_cover <- bind_rows(cover, traces) %>%
dplyr::group_by(plotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = str_sub(plotID, 1,4),
subplotID = "plot")
if(fix_unks) full_on_cover <- full_on_cover %>%  unk_fixer()
if(dissolve_years) {
n_years <- length(unique(full_on_cover$year))
full_on_cover <- full_on_cover %>%
group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
summarise(cover = sum(cover, na.rm=T)/n_years)
}
full_on_cover
cover8 <- neon_div_object$div_1m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
# entries in the df with no values but species was there
# i.e. someone put the sp. code and forgot to fill in the number
# putting as trace cover value
replace_na(list(percentCover=trace_cover)) %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(divDataType == "plantSpecies") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
# dealing with the multiple bout issue by first getting the mean cover
# per sampling effort, without aggregating, then later we'll aggregate.
# that way, a fall-bloomer that isn't visible in spring, for example,
# will be given its full cover value for fall, but then a species
# that is there for both seasons will be averaged, if that makes sense
dplyr::summarise(cover = max(percentCover),
nativeStatusCode = first(nativeStatusCode),
scientificName = first(scientificName),
family = first(family)) %>%
dplyr::ungroup()  %>%
dplyr::filter(taxonID != "") %>%
dplyr::mutate(subplotID = str_sub(subplotID, 1, 4))
traces8 <- neon_div_object$div_10m2Data100m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::filter(taxonID != "",
subplotID != "31", # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID != "32",
subplotID != "40",
subplotID != "41")  %>%
dplyr::mutate(subplotID = str_sub(subplotID, 1, 4))
traces100s <- neon_div_object$div_10m2Data100m2Data %>%
dplyr::mutate(endDate = as.Date(endDate)) %>%
dplyr::filter(targetTaxaPresent == "Y") %>%
dplyr::mutate(year = str_c(str_sub(endDate,1,4)))%>%
dplyr::group_by(plotID, subplotID, taxonID, year) %>%
dplyr::summarise(cover = trace_cover,
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family)) %>%
dplyr::ungroup() %>%
dplyr::mutate(site = str_sub(plotID, 1,4)) %>%
dplyr::filter(taxonID != "",
subplotID == "31"| # these are the 100m2 subplots under which two 1m2 and 10m2 pairs are nested
subplotID == "32"|
subplotID == "40"|
subplotID == "41")
# aggregating at different scales ----------------------------------------------
cover8_1m2 <- cover8 %>%
dplyr::group_by(plotID, subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = str_sub(plotID, 1,4))
cover8_1m2_10m2 <- rbind(cover8, traces8) %>%
dplyr::group_by(plotID,subplotID, taxonID, year, nativeStatusCode, scientificName, family) %>%
dplyr::summarise(cover = sum(cover)) %>%
dplyr::ungroup()%>%
dplyr::mutate(site = str_sub(plotID, 1,4))
if(fix_unks) cover8_1m2_10m2<-cover8_1m2_10m2 %>%  unk_fixer()
cover4 <- cover8_1m2_10m2 %>%
dplyr::mutate(subplotID = str_sub(subplotID, 1,2)) %>%
rbind(traces100s) %>% # adding in the 100m2 subplots
dplyr::group_by(plotID, subplotID, year, taxonID) %>%
dplyr::summarise(cover = sum(cover), # this is summing together repeats from the rbinding
scientificName = first(scientificName),
nativeStatusCode = first(nativeStatusCode),
family = first(family),
site = first(site)) %>%
dplyr::ungroup()
full_on_cover <- cover8_1m2
n_years <- length(unique(full_on_cover$year))
full_on_cover <- full_on_cover %>%
group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
summarise(cover = sum(cover, na.rm=T)/n_years)
full_on_cover
full_on_cover <- cover8_1m2_10m2
if(dissolve_years) {
n_years <- length(unique(full_on_cover$year))
full_on_cover <- full_on_cover %>%
group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
summarise(cover = sum(cover, na.rm=T)/n_years)
}
full_on_cover
full_on_cover <- cover4
n_years <- length(unique(full_on_cover$year))
full_on_cover <- full_on_cover %>%
group_by(plotID, taxonID, nativeStatusCode, scientificName, family, site, subplotID) %>%
summarise(cover = sum(cover, na.rm=T)/n_years)
full_on_cover
n_years
devtools::document()
devtools::install()
